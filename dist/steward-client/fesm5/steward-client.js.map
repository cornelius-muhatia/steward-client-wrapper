{"version":3,"file":"steward-client.js.map","sources":["ng://steward-client/lib/entities/wrappers/response-wrapper.ts","ng://steward-client/lib/steward-client.service.ts","ng://steward-client/lib/steward-client.component.ts","ng://steward-client/lib/entities/wrappers/page.ts","ng://steward-client/lib/entities/tgr-dynamic-control.ts","ng://steward-client/lib/tgr-material-table/tgr-material-table.component.ts","ng://steward-client/lib/tgr-autocomplete/tgr-autocomplete.component.ts","ng://steward-client/lib/steward-client.module.ts"],"sourcesContent":["/**\n * Wraps server response\n */\nexport class ResponseWrapper<T> {\n    /**\n     * Http status code e.g. 200\n     */\n    status: number;\n    /**\n     * Server message\n     */\n    message: string;\n    /**\n     * Actual response data\n     */\n    data: T;\n}\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders, HttpErrorResponse, HttpParams } from '@angular/common/http';\r\nimport { Observable, of } from 'rxjs';\r\nimport { catchError, map, tap } from 'rxjs/operators';\r\nimport { ResponseWrapper } from './entities/wrappers/response-wrapper';\r\nimport { Queue } from 'queue-typescript';\r\n\r\nexport class StewardConfig {\r\n    base_url: string;\r\n    access_token?: string;\r\n    headers?: HttpHeaders;\r\n}\r\n\r\n@Injectable()\r\nexport class StewardClientService<T, E> {\r\n\r\n    private headers: HttpHeaders;\r\n    token: string;\r\n    base_url: string = \"/\";\r\n\r\n    constructor(private http: HttpClient, private config: StewardConfig) {\r\n        this.base_url = config.base_url;\r\n        if (config.headers) {\r\n            this.headers = config.headers.append('Content-Type', 'application/json; charset=utf-8');\r\n        } else {\r\n            this.headers = new HttpHeaders({\r\n                'Content-Type': 'application/json; charset=utf-8'\r\n            });\r\n        }\r\n        if (config.access_token) {//append access token if the environment has access token\r\n            this.headers = this.headers.append('Authorization', \"Bearer \" + config.access_token);\r\n        }\r\n    }\r\n\r\n    /**\r\n     *  Used to update authorization token. Currently supports bearer token\r\n     * \r\n     * @param token \r\n     */\r\n    setToken(token: string) {\r\n        if (this.config.access_token) {//update token header\r\n            this.headers.set(\"Authorization\", \"Bearer \" + token);\r\n        } else {//append access token if the environment has access token            \r\n            this.headers = this.headers.append('Authorization', \"Bearer \" + token);\r\n        }\r\n    }\r\n    /**\r\n     * Used to handle http post requests\r\n     * @param endpoint expects either an endpoint or url\r\n     * @param data a valid object\r\n     * @param addHeaders additional headers to be appended to existing headers\r\n     */\r\n    post(endpoint: string, data: T, addHeaders?: Map<string, string | string[]>): Observable<ResponseWrapper<E>> {\r\n\r\n        return this.http.post(this.serviceURL(endpoint), JSON.stringify(data), { headers: addHeaders ? this.appendHeaders(addHeaders) : this.headers }).pipe(\r\n            catchError(this.handleError<any>())\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Used to handle http post requests\r\n     * @param endpoint expects either an endpoint or url\r\n     * @param addHeaders additional headers to be appended to existing headers\r\n     */\r\n    put(endpoint: string, data: T, addHeaders?: Map<string, string | string[]>): Observable<ResponseWrapper<E>> {\r\n        return this.http.put(this.serviceURL(endpoint), JSON.stringify(data), { headers: addHeaders ? this.appendHeaders(addHeaders) : this.headers }).pipe(\r\n            catchError(this.handleError<any>())\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Handles http delete request\r\n     * @param endpoint expects either an endpoint or url\r\n     * @param data \r\n     * @param addHeaders additional headers to be appended to existing headers\r\n     */\r\n    delete(endpoint: string, data: T, addHeaders?: Map<string, string | string[]>): Observable<ResponseWrapper<E>> {\r\n        return this.http.request('delete', this.serviceURL(endpoint), { headers: addHeaders ? this.appendHeaders(addHeaders) : this.headers, body: JSON.stringify(data) }).pipe(\r\n            catchError(this.handleError<any>())\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Handles http get request\r\n     * @param endpoint expects either an endpoint or url\r\n     * @param data request params\r\n     * @param addHeaders additional headers to be appended to existing headers\r\n     */\r\n    get(endpoint: string, data?: Map<string, string>, addHeaders?: Map<string, string | string[]>): Observable<ResponseWrapper<E>> {\r\n        const options = {\r\n            headers: addHeaders ? this.appendHeaders(addHeaders) : this.headers,\r\n            params: this.getHttpParams(data)\r\n        };\r\n        return this.http.get(this.serviceURL(endpoint), options).pipe(\r\n            catchError(this.handleError<any>())\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Fetch a file\r\n     * @param endpoint expects either an endpoint or url\r\n     * @param data \r\n     */\r\n    getFile(endpoint: string, data?: Map<string, string>): Observable<ResponseWrapper<E>> {\r\n        const options = {\r\n            params: this.getHttpParams(data)\r\n        };\r\n        return this.http.get(this.serviceURL(endpoint) + '?access_token=' + this.token, options).pipe(\r\n            catchError(this.handleError<any>())\r\n        );\r\n    }\r\n    /**\r\n     * if\r\n     * @param endpoint expects either an endpoint or url\r\n     * @param data \r\n     * @param headers \r\n     */\r\n    postFormData(endpoint: string, data: T, headers?: HttpHeaders): Observable<ResponseWrapper<E>> {\r\n        const formData: FormData = new FormData();\r\n        Object.keys(data).forEach((key) => {\r\n            formData.append(key, data[key]);\r\n        });\r\n        if (this.headers.get(\"Authorization\") && (!headers)) {\r\n            headers = new HttpHeaders({ 'Authorization': 'Bearer ' + this.token });\r\n        } else if (!headers) {\r\n            headers = new HttpHeaders();\r\n        }\r\n        return this.http.post(this.serviceURL(endpoint), formData, { headers: headers }).pipe(\r\n            catchError(this.handleError<any>())\r\n        );\r\n    }\r\n\r\n    /**\r\n     * handle http form data request\r\n     * @param endpoint expects either an endpoint or url\r\n     * @param data expects a valid object\r\n     */\r\n    postFormDataMultipart(endpoint: string, data: T): Observable<ResponseWrapper<E>> {\r\n        const formData: FormData = new FormData();\r\n        Object.keys(data).forEach((key) => {\r\n            if (Array.isArray(data[key])) {\r\n                data[key].forEach(k2 => {\r\n                    formData.append(key, k2);\r\n                });\r\n            } else {\r\n                formData.append(key, data[key]);\r\n            }\r\n        });\r\n        return this.http.post(this.serviceURL(endpoint), formData, { headers: new HttpHeaders({ 'Authorization': 'Bearer ' + this.token }) }).pipe(\r\n            catchError(this.handleError<any>())\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Handles http put form data request\r\n     * @param endpoint expects either an endpoint or url\r\n     * @param data valid object\r\n     */\r\n    putFormDataMultiPart(endpoint: string, data: T): Observable<ResponseWrapper<E>> {\r\n        const formData: FormData = new FormData();\r\n        Object.keys(data).forEach((key) => {\r\n            if (Array.isArray(data[key])) {\r\n                data[key].forEach(k2 => {\r\n                    formData.append(key, k2);\r\n                });\r\n            } else {\r\n                formData.append(key, data[key]);\r\n            }\r\n        });\r\n        return this.http.put(this.serviceURL(endpoint), formData, { headers: new HttpHeaders({ 'Authorization': 'Bearer ' + this.token }) }).pipe(\r\n            catchError(this.handleError<any>())\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Convert map to HttpParams\r\n     * @param data \r\n     */\r\n    private getHttpParams(data: Map<string, string>): HttpParams {\r\n        if (data == undefined) {\r\n            return new HttpParams();\r\n        }\r\n        let httpParams: HttpParams = new HttpParams();\r\n        data.forEach((value: string, key: string) => {\r\n            httpParams = httpParams.append(key, value);\r\n        });\r\n        return httpParams;\r\n    }\r\n    /**\r\n     * Used to catch exception thrown by http client returns internal server error\r\n     * if status 500 is encountered\r\n     */\r\n    private handleError<ResponseWrapper>() {\r\n        return (error: HttpErrorResponse): Observable<any> => {\r\n            const res = new ResponseWrapper();\r\n            //            console.error(error); // log to console instead\r\n            if (error.status == 500) {\r\n                res.status = error.status;\r\n                res.message = 'Sorry internal server error occured please try again later';\r\n            } else {\r\n                res.status = error.status;\r\n                res.message = error.error.message;\r\n                res.data = error.error.data;\r\n            }\r\n            return of(res);\r\n        };\r\n    }\r\n    /**\r\n     * Used to render action buttons\r\n     */\r\n    static renderMore(id: any) {\r\n        return '<div class=\\'actions-buttons center\\' id=\\'' + id + '\\'><i class=\\'fa fa-check\\' title=\\'Approve\\'></i> <i class=\\'fa fa-ban\\' title=\\'Decline\\'></i></div>';\r\n    }\r\n\r\n    /**\r\n     * Handles datatable request\r\n     * @param endpoint expects either an endpoint or url\r\n     * @param data expects a valid map\r\n     */\r\n    public intiateDataTable(endpoint: string, data?: Map<string, string>) {\r\n        const options = {\r\n            headers: this.headers,\r\n            params: this.getHttpParams(data)\r\n        };\r\n        return this.http.get(this.serviceURL(endpoint), options).pipe(\r\n            catchError(this.handleError<any>())\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Used to validate if a string is a valid URL\r\n     * @param url\r\n     */\r\n    public isURL(url: string): boolean {\r\n        try {\r\n            new URL(url);\r\n            return true;\r\n        } catch (_) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * If the url parameter is an endpoint it appends to the base url\r\n     * @param url \r\n     * @see base_url\r\n     */\r\n    public serviceURL(url: string): string {\r\n        return (this.isURL(url)) ? url : this.base_url + url;\r\n    }\r\n\r\n    /**\r\n   * Used to find key value based on the key sequence provided\r\n   * @param data expects an object\r\n   * @param keys i.e. user.gender.type.type\r\n   */\r\n    public getObjectValue(data: any, keys: Queue<string>) {\r\n        if ((!(data instanceof Object)) || (keys.length == 1)) {\r\n            return data[keys.tail];\r\n        }\r\n        let value = null;\r\n        Object.keys(data).forEach((key) => {\r\n            if ((key == keys.front) && (data[key] instanceof Object)) {\r\n                value = this.getObjectValue(data[key], keys);\r\n            } else if (key == keys.tail) {\r\n                value = data[key];\r\n            }\r\n        });\r\n        return value;\r\n\r\n    }\r\n    \r\n    /**\r\n     * Used to append headers the current httpHeaders\r\n     * @returns merged headers\r\n     */\r\n    public appendHeaders(entries: Map<String, string | string[]>): HttpHeaders{\r\n        let customHeaders: HttpHeaders = this.headers;\r\n        entries.forEach((val: string | string[], key: string) => {\r\n            customHeaders = customHeaders.append(key, val);\r\n        });\r\n        return customHeaders;\r\n    }\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'stw-steward-client',\r\n  template: `\r\n    <p>\r\n      steward-client works!\r\n    </p>\r\n  `,\r\n  styles: []\r\n})\r\nexport class StewardClientComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n","/**\n * Datable page used to wrapper server content response\n */\nexport class Page<T> {\n    /**\n     * Number of items per page same as limit\n     */\n    size: number = 20;\n    /**\n     * Total items available on the server\n     */\n    totalElements: number = 0;\n    /**\n     * Total number of pages present\n     */\n    totalPages: number = 0;\n    /**\n     * Checks if is the first page\n     */\n    first: boolean = true;\n    /**\n     * Checks if it is the last page\n     */\n    last: boolean = false;\n    /**\n     * The actual page content\n     */\n    content: Array<T> = [];\n    /**\n     * Used to map sort parameters\n     */\n    sorted: Sort = new Sort();\n    /**\n     * Current page number\n     */\n    number: number = 0;\n}\n/**\n * used to map sort request\n */\nexport class Sort{\n    sorted: boolean = false;\n    unsorted: boolean = true;\n}\n","/**\n * Represents dynamic html controls (Input, TextArea and Select)\n */\nexport class TgrDynamicControl<T> {\n    /**\n     * Control label\n     */\n    label: string;\n    /**\n     * Icon to be appended before the control (supports class defined icons)\n     */\n    icon: string;\n    /**\n     * Name of the control (provide variable valid names ie. no spaces prefarably api corresponding names e.g. userName)\n     */\n    name: string;\n    /**\n     * The actual control (TgrInput, TgrTextArea & TgrSelect)\n     */\n    controlType: T;\n    /**\n     * Checks if the field is required\n     */\n    isRequired: boolean;\n    /**\n     * Control placeholder\n     */\n    placeholder: string = \"\";\n\n    constructor(label: string, name: string, controlType: T, icon: string = \"fa fa-file-text-o\",\n        isRequired: boolean = false, placeholder: string = null) {\n        this.label = label;\n        this.name = name;\n        this.controlType = controlType;\n        this.icon = icon;\n        this.isRequired = isRequired;\n        this.placeholder = placeholder ? placeholder : label;\n    }\n\n}\n/**\n * Used to represent html input with options:\n * type: default to text,  maxLength, minLength, min, max\n */\nexport class TgrInput{\n    /**\n     * Type of input e.g. text, number, date\n     */\n    type: string;\n    /**\n     * Used to validate length of the input\n     */\n    maxLength: number;\n    /**\n     * Used to validate minimum input length\n     */\n    minLength: number;\n    /**\n     * Used to validate number inputs\n     */\n    min: number;\n    /**\n     * Used to validate number inputs\n     */\n    max: number;\n\n    constructor(type: string = \"text\") {\n        this.type = type;\n        this.minLength = this.min = 0;\n        this.maxLength = 4000;\n        this.max = 1000000000;\n    }\n}\n\n/**\n * Represents html textarea input\n */\nexport class TgrTextarea{\n    /**\n     * Number textarea columns\n     */\n    cols?: number;\n    /**\n     * Number of textarea rows\n     */\n    rows?: number;\n    /**\n     * Validate maximum input length\n     */\n    maxLength: number;\n    /**\n     * Validate minimum input length\n     */\n    minLength: number;\n\n    constructor(cols: number = 5, rows: number = 1){\n        this.cols = cols;\n        this.rows = rows;\n        this.maxLength = 4000;\n        this.minLength = 0\n    }\n}\n\n/**\n * Represents html select control\n */\nexport class TgrSelect {\n    /**\n     * Select options\n     */\n    options: Array<TgrSelectOption>;\n\n    constructor(options: Array<TgrSelectOption>){\n        this.options = options;\n    }\n\n}\n\nexport class TgrSelectOption{\n    /**\n     * Option value\n     */\n    value: string | number;\n    /**\n     * Option text/label\n     */\n    text: string;\n\n    constructor(value: string, text: string = null){\n        this.value = value;\n        this.text = text ? text : value;\n    }\n\n}\n\n","import { Component, OnInit, EventEmitter, Input, Output, ViewChild, AfterViewInit } from '@angular/core';\nimport { NgForm, FormGroup, FormControl, Validators } from '@angular/forms';\nimport { Page } from '../entities/wrappers/page';\nimport { MlkDynamicControl, MlkInput, MlkTextarea, MlkSelect } from '../entities/wrappers/mlk-dynamic-control';\nimport { ResponseWrapper } from '../entities/wrappers/response-wrapper';\nimport { StewardClientService } from '../steward-client.service';\nimport { DatatableComponent } from '@swimlane/ngx-datatable';\nimport { Queue } from 'queue-typescript';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { DateAdapter, MAT_DATE_FORMATS, MAT_DATE_LOCALE } from '@angular/material/core';\nimport { NativeDateAdapter, PageEvent, MatSort, Sort } from \"@angular/material\";\nimport { TgrDynamicControl, TgrInput, TgrSelect, TgrTextarea } from '../entities/tgr-dynamic-control';\nimport { DatePipe } from '@angular/common';\n\n/**\n * Format angular date to dd-mm-yyyy\n */\nexport class AppDateAdapter extends NativeDateAdapter {\n\n  /**\n   * Parse date to dd-mm-yyyy\n   * @param date  date input\n   * @param displayFormat expects to be input string\n   */\n  format(date: Date, displayFormat: Object): string {\n\n    if (displayFormat === 'input') {\n\n      var day = date.getDate();\n      var month = date.getMonth() + 1;\n      const year = date.getFullYear();\n      let dayString: string;\n      let monthString: string;\n\n      if (day < 10) {\n        dayString = '0' + day;\n      } else {\n        dayString = '' + day;\n      }\n\n      if (month < 10) {\n        monthString = '0' + month;\n      } else {\n        monthString = '' + month;\n      }\n\n      return `${year}-${monthString}-${dayString}`;\n    }\n\n    return date.toDateString();\n  }\n}\n/**\n * Material date formats\n */\nexport const APP_DATE_FORMATS =\n{\n  parse: {\n    dateInput: { month: 'numeric', year: 'numeric', day: 'numeric' },\n  },\n  display: {\n    dateInput: 'input',\n    monthYearLabel: { year: 'numeric', month: 'numeric' },\n    dateA11yLabel: { year: 'numeric', month: 'numeric', day: 'numeric' },\n    monthYearA11yLabel: { year: 'numeric', month: 'long' },\n  }\n};\n\n\n@Component({\n  selector: 'tgr-material-table',\n  template: `<div class=\"row\"  *ngIf=\"showDefaultFilters || filterComponents.length > 0\">\n  <div class=\"col-md-12\">\n    <div class=\"card card-outline-default mat-elevation-z4\">\n      <div class=\"card-body\">\n        <div class=\"row\">\n          <div class=\"col-md-12\">\n            <div class=\"mat-table-filter\">\n                <button title=\"Refresh\" (click) = \"refreshTable()\" mat-icon-button color=\"basic\" type=\"reset\"><mat-icon>refresh</mat-icon></button>\n            </div>\n          </div>\n        </div>\n        <form (ngSubmit)=\"processFilter(filterForm)\" [formGroup]=\"filterForm\">\n          <div class=\"row\">\n            <div class=\"col-md-3  mb-3\" *ngFor=\"let control of filterComponents\">\n              <!-- Intialize form select control -->\n              <mat-form-field class=\"col-md-12\" *ngIf=\"isSelect(control.controlType)\">\n                <mat-select [placeholder]=\"control.placeholder\" [formControlName]=\"control.name\">\n                  <mat-option *ngFor=\"let o of control.controlType.options\" [value]=\"o.value\">\n                    {{o.text}}\n                  </mat-option>\n                </mat-select>\n                <mat-error *ngIf=\"filterForm.get(control.name).hasError('required')\">{{control.placeholder}}\n                  is required</mat-error>\n              </mat-form-field>\n\n              <!-- Intialize form textarea control -->\n              <mat-form-field class=\"col-md-12\" *ngIf=\"isTextArea(control.controlType)\">\n                <textarea matInput [formControlName]=\"control.name\" [placeholder]=\"control.label\" [cols]=\"control.controlType.cols\"\n                  [rows]=\"control.controlType.rows\"></textarea>\n                <mat-error *ngIf=\"filterForm.get(control.name).hasError('required')\">{{control.placeholder}}\n                  is required</mat-error>\n                <mat-error *ngIf=\"filterForm.get(control.name).hasError('minlength')\">Minimum of\n                  {{control.controlType.minLength}} characters</mat-error>\n                <mat-error *ngIf=\"filterForm.get(control.name).hasError('maxlength')\">Maximum of\n                  {{control.controlType.maxLength}} characters</mat-error>\n              </mat-form-field>\n\n              <!-- Intialize form input control -->\n              <mat-form-field class=\"col-md-12\" *ngIf=\"isInput(control.controlType)\">\n                <!-- <mat-icon matPrefix class=\"material-icons icon-margin-right\">perm_identity</mat-icon> -->\n                <input matInput [placeholder]=\"control.label\" [type]=\"control.controlType.type\" [formControlName]=\"control.name\" />\n                <mat-error *ngIf=\"filterForm.get(control.name).hasError('required')\">{{control.placeholder}}\n                  is required</mat-error>\n                <mat-error *ngIf=\"filterForm.get(control.name).hasError('minlength')\">Minimum of\n                  {{control.controlType.minLength}} characters</mat-error>\n                <mat-error *ngIf=\"filterForm.get(control.name).hasError('maxlength')\">Maximum of\n                  {{control.controlType.maxLength}} characters</mat-error>\n                <mat-error *ngIf=\"filterForm.get(control.name).hasError('min')\">Should be greater than\n                  {{control.controlType.min}}</mat-error>\n                <mat-error *ngIf=\"filterForm.get(control.name).hasError('max')\">Should be less than\n                  {{control.controlType.max}}</mat-error>\n              </mat-form-field>\n            </div>\n            <div class=\"col-md-3 mb-3\" *ngIf=\"showDefaultFilters\">\n              <!-- <mat-icon matPrefix class=\"material-icons col-md-3\">date_range</mat-icon> -->\n              <mat-form-field class=\"col-md-12\">\n                <input matInput placeholder=\"From\" type=\"date\" [matDatepicker]=\"picker\" formControlName=\"from\" />\n                <mat-datepicker-toggle matSuffix [for]=\"picker\"></mat-datepicker-toggle>\n                <mat-datepicker #picker></mat-datepicker>\n              </mat-form-field>\n            </div>\n            <div class=\"col-md-3 mb-3\" *ngIf=\"showDefaultFilters\">\n              <mat-form-field class=\"col-md-12\">\n                <!-- <mat-icon>home</mat-icon> -->\n                <input matInput placeholder=\"To\" type=\"date\" [matDatepicker]=\"toPicker\" formControlName=\"to\" />\n                <mat-datepicker-toggle matSuffix [for]=\"toPicker\"></mat-datepicker-toggle>\n                <mat-datepicker #toPicker></mat-datepicker>\n              </mat-form-field>\n            </div>\n            <div class=\"col-md-3 mb-3\" *ngIf=\"showDefaultFilters\">\n              <mat-form-field class=\"col-md-12\">\n                <input matInput maxlength=\"100\" placeholder=\"Search\" type=\"text\" formControlName=\"needle\" />\n              </mat-form-field>\n            </div>\n            <span class=\"help-block\" *ngIf=\"filterForm.get('from').touched\">\n              <span class=\"text-danger\" *ngIf=\"filterForm.get('from').hasError('maxlength')\">Maximum of 200 characters</span>\n            </span>\n          </div>\n          <div class=\"row\">\n            <div class=\"col-md-12\">\n              <div class=\"pull-right mat-table-filter\">\n                <button mat-raised-button color=\"primary\" type=\"submit\" [disabled]=\"filterForm.invalid\">Filter</button>\n                <button mat-raised-button color=\"basic\" type=\"reset\">Reset</button>\n              </div>\n            </div>\n          </div>\n        </form>\n      </div>\n    </div>\n  </div>\n</div>\n<div class=\"row\">\n  <div class=\"col-md-12\">\n      <div class=\"mat-table-loading-shade\" *ngIf=\"isLoadingResults\">\n        <mat-spinner *ngIf=\"isLoadingResults\"></mat-spinner>\n      </div>\n    <table mat-table [dataSource]=\"page.content\" class=\"mat-elevation-z8\" style=\"width: 100%\" matSort (matSortChange)=\"processSorting($event)\">\n\n      <!--- Note that these columns can be defined in any order.\n          The actual rendered columns are set as a property on the row definition\" -->\n\n      <!-- Position Column -->\n      <ng-container matColumnDef=\"checkbox\" *ngIf=\"enableCheckbox\">\n        <th mat-header-cell *matHeaderCellDef>\n          <mat-checkbox (change)=\"$event ? masterToggle() : null\" [checked]=\"selection.hasValue() && isAllSelected()\"\n            [indeterminate]=\"selection.hasValue() && !isAllSelected()\">\n          </mat-checkbox>\n        </th>\n        <!-- <td mat-cell *matCellDef=\"let element\"> <mat-checkbox></mat-checkbox> </td> -->\n        <td mat-cell *matCellDef=\"let row\">\n          <mat-checkbox (click)=\"$event.stopPropagation()\" (change)=\"$event ? selection.toggle(row) : null\" [checked]=\"selection.isSelected(row)\">\n          </mat-checkbox>\n        </td>\n      </ng-container>\n\n      <!-- Number Column -->\n      <ng-container matColumnDef=\"no\" *ngIf=\"showNumberColumn\">\n        <th mat-header-cell *matHeaderCellDef mat-sort-header> No. </th>\n        <td mat-cell *matCellDef=\"let element\" > \n           <div>{{element['no']}}</div>\n          </td>\n      </ng-container>\n\n      <!-- Fields Columns -->\n      <ng-container [matColumnDef]=\"c.fieldName\" *ngFor=\"let c of columns\">\n        <th mat-header-cell *matHeaderCellDef mat-sort-header [class.hide_on_xs]=\"c.hideOnXs\"> {{c.columnName}} </th>\n        <td mat-cell *matCellDef=\"let element\" [class.hide_on_xs]=\"c.hideOnXs\"> \n          <!-- {{c.isDateColumn ?\n          (getFieldValue(element, c) | date:'medium') :\n          getFieldValue(element, c)}} -->\n           <div [innerHtml] = \"getFieldValue(element, c)\"></div></td>\n      </ng-container>\n\n      <!-- Other Column -->\n      <ng-container matColumnDef=\"actions\" *ngIf=\"moreActions\">\n        <th mat-header-cell *matHeaderCellDef> {{moreActions.name}} </th>\n        <td mat-cell *matCellDef=\"let element\">\n          <button mat-icon-button [matMenuTriggerFor]=\"menu\">\n            <mat-icon>list</mat-icon>\n          </button>\n          <mat-menu #menu=\"matMenu\">\n            <button mat-menu-item *ngFor=\"let action of moreActions.actions\" (click)=\"onActionClick({id: element[moreActions.idFieldName], actionName: action.actionName})\">{{action.actionName}}</button>\n          </mat-menu>\n        </td>\n      </ng-container>\n      <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n      <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n    </table>\n    <mat-paginator (page)=\"pageEvent($event)\" showFirstLastButtons [length]=\"page.totalElements\" [pageSize]=\"20\" [pageSizeOptions]=\"[1, 5, 10, 20, 50, 100, 200]\">\n    </mat-paginator>\n  </div>\n</div>`,\n  styles: [`.mat-table-filter button{margin-right:8px;float:right}@media (max-width:576px){.hide_on_xs{display:none}}.mat-table-loading-shade{position:absolute;top:0;left:0;bottom:56px;right:0;background:rgba(0,0,0,.15);z-index:1;display:flex;align-items:center;justify-content:center}.mat-cell{padding-right:8px}`],\n  providers: [\n    { provide: DateAdapter, useClass: AppDateAdapter },\n    {\n      provide: MAT_DATE_FORMATS, useValue: APP_DATE_FORMATS\n    }\n  ]\n})\nexport class TgrMaterialTableComponent implements OnInit, AfterViewInit {\n\n  displayedColumns: string[] = [];\n  @Output() selection: SelectionModel<any> = new SelectionModel<any>(true, []);\n  @Output() rowSelection = new EventEmitter<SelectionModel<any>>();\n  @ViewChild(MatSort) sort: MatSort;\n\n\n  @Input() columns: Array<TgrMatTableColumn> = [];\n  @Input() enableCheckbox: boolean = true;\n  @Input() endpoint: string;\n  @Input() moreActions: TgrMoreActions;\n  @Output() actionsEvent = new EventEmitter<TgrMoreActionData>()\n  @Input() filterComponents: Array<TgrDynamicControl<any>> = [];\n  @Input() params: Map<string, any>;\n  @Input() showDefaultFilters: boolean = true;\n  @Input() showNumberColumn: boolean = false;\n  /**\n   * Additional headers to be appended on the request headers\n   */\n  @Input() headers: Map<string, string | string[]>;\n  page: Page<any>;\n  selected = [];\n  @ViewChild(DatatableComponent) table: DatatableComponent;\n  filter: Object = {};\n  filterForm: FormGroup;\n  private sortParams: Sort;\n  /**\n   * Checks if server request has been processed\n   */\n  isLoadingResults = false;\n  /**\n   * Date pipe\n   */\n  private datePipe: DatePipe\n\n  constructor(private sterwardService: StewardClientService<ResponseWrapper<Page<any>>, any>) {\n    this.page = new Page();\n    this.page.content = [];\n    this.datePipe = new DatePipe(\"en-US\");\n  }\n\n  /**\n   * Generate form control from filterComponents and also appending default controls ie. date filter and search controls\n   */\n  ngOnInit() {\n    //intializing table columns\n    if(this.enableCheckbox){\n      this.displayedColumns.push(\"checkbox\");\n    }\n    if(this.showNumberColumn){\n      this.displayedColumns.push(\"no\");\n    }\n    this.columns.forEach(c => {\n      this.displayedColumns.push(c.fieldName);\n    });\n    if (this.moreActions) {\n      this.displayedColumns.push(\"actions\");\n    } else {\n      console.debug(\"moreActions not injected skipping rendering 'More Actions' column\");\n    }\n    let group = {};\n    this.filterComponents.forEach(comp => {\n      let validators: Array<any> = [];\n      if (comp.isRequired) {\n        validators.push(Validators.required);\n      }\n\n      if (comp.controlType instanceof TgrInput || comp.controlType instanceof TgrTextarea) {\n        validators.push(Validators.minLength(comp.controlType.minLength));\n        validators.push(Validators.maxLength(comp.controlType.maxLength));\n      }\n\n      if (comp.controlType instanceof TgrInput) {\n        validators.push(Validators.max(comp.controlType.max));\n        validators.push(Validators.min(comp.controlType.min));\n      }\n      group[comp.name] = new FormControl('', validators)\n    });\n    //add default controls\n    group['from'] = new FormControl('', Validators.maxLength(100));\n    group['to'] = new FormControl('', Validators.maxLength(100));\n    group['needle'] = new FormControl('', Validators.maxLength(200));\n    this.filterForm = new FormGroup(group);\n    this.loadPage({ offset: 0, limit: this.page.size }, null);\n  }\n\n  /**\n   * After view intialization fire selection event\n   */\n  ngAfterViewInit(): void {\n    this.rowSelection.emit(this.selection);\n  }\n\n  /** Whether the number of selected elements matches the total number of rows. */\n  isAllSelected() {\n    const numSelected = this.selection.selected.length;\n    const numRows = this.page.content.length;\n    return numSelected == numRows;\n  }\n\n  /** Selects all rows if they are not all selected; otherwise clear selection. */\n  masterToggle() {\n    this.isAllSelected() ?\n      this.selection.clear() :\n      this.page.content.forEach(row => this.selection.select(row));\n  }\n\n  /**\n   * Used to emit click event of the actions\n   * @param event\n   */\n  onActionClick(event: TgrMoreActionData) {\n    this.actionsEvent.emit(event);\n  }\n\n  /**\n   * Process server request of datable\n   * @param pageInfo\n   * @param filters\n   */\n  loadPage(pageInfo, filters) {\n    if (!this.endpoint) {\n      return;\n    }\n    this.isLoadingResults = true;\n    let request: Map<string, any>;\n    if (filters) {\n      request = filters;\n    } else {\n      request = new Map();\n    }\n    if (this.params) {\n      this.params.forEach((value, key) => {\n        if (key != null && key != undefined) { //ignore null values\n          request.set(key, value);\n        }\n      });\n    }\n    request.set(\"page\", pageInfo.offset);\n    request.set(\"size\", pageInfo.limit);\n    this.sterwardService.get(this.endpoint, request, this.headers).subscribe(response => {\n      if (response.status == 200) {\n        if(this.showNumberColumn){\n          let no = 1 + (response.data.number * response.data.size);\n          response.data.content.forEach((val) => {\n            val['no'] = no++;\n          });\n        }\n        this.page = response.data;\n      }\n      this.isLoadingResults = false;\n    },\n      error => {\n        console.debug(\"Server request has failed\");\n        this.isLoadingResults = false;\n      });\n\n  }\n\n  /**\n   * Used tolisten to pagination events/actions\n   * @param page \n   */\n  pageEvent(page: PageEvent) {\n    this.loadPage({ limit: page.pageSize, offset: page.pageIndex }, this.getFilters());\n  }\n\n\n  /**\n   * Used to processing table sorting\n   * @param event \n   */\n  processSorting(event: Sort) {\n    this.sortParams = event;\n    this.loadPage({ limit: this.page.size, offset: 0 }, this.getFilters());\n  }\n\n  /**\n   * Used to get filter entries from the filter form. Also adds sort parameters to request\n   */\n  private getFilters() {\n    //@ts-ignore\n    // let f: Map<String, any> = new Map(Object.entries(this.filterForm.value));\n    let f: Map<String, any> = new Map();\n    Object.keys(this.filterForm.value).forEach((val, key) => {\n      // console.debug(\"Key is \" + key + \" and value \" + val);\n      if (this.filterForm.value[val]) {\n        if (val == 'from' || val == \"to\") {\n          f.set(val, this.datePipe.transform(this.filterForm.value[val], 'yyyy-MM-dd'));\n        } else {\n          f.set(val, this.filterForm.value[val]);\n        }\n      }\n    })\n    //add sorting parameters\n    if (this.sortParams) {\n      f.set(\"sort\", this.sortParams.active + \",\" + this.sortParams.direction);\n    }\n    return f;\n  }\n  /**\n   * Used to process table filter. If date filter is not provide the from value is \n   * set to 2018-01-01 and to value is set to 1 year from today\n   * @param form \n   * @deprecated\n   */\n  processFilter(form) {\n    //@ts-ignore\n    this.loadPage({ offset: this.page.number, limit: this.page.size }, this.getFilters());\n  }\n\n  /**\n   * Used to check if miliki control is input\n   * @param control\n   */\n  isInput(control: any) {\n    return control instanceof TgrInput;\n  }\n\n  /**\n   * Used to check if miliki control is select\n   * @param control\n   */\n  isSelect(control: any) {\n    return control instanceof TgrSelect;\n  }\n\n  /**\n   * Used to check if miliki control is textarea\n   */\n  isTextArea(control: any) {\n    return control instanceof TgrTextarea;\n  }\n\n  /**\n   * Used to format date to string yyyy-MM-dd\n   * @param date\n   */\n  getFormattedDate(date) {\n    var year = date.getFullYear();\n\n    var month = (1 + date.getMonth()).toString();\n    month = month.length > 1 ? month : '0' + month;\n\n    var day = date.getDate().toString();\n    day = day.length > 1 ? day : '0' + day;\n\n    return year + '-' + month + '-' + day;\n  }\n\n  getFieldValue(data: Object, column: TgrMatTableColumn) {\n    if (column.callback) {\n      return column.callback(data);\n    }\n    var k: Array<string> = column.fieldName.split(\".\");\n    var keys = new Queue<string>(...k);\n    let value = this.sterwardService.getObjectValue(data, keys);\n    return column.isDateColumn ? this.datePipe.transform(value, 'medium') : value;\n  }\n\n  /**\n   * Refresh data table values\n   */\n  refreshTable() {\n    console.debug(\"Refreshed data tables\");\n    //@ts-ignore\n    this.loadPage({ offset: this.page.number, limit: this.page.size }, this.getFilters());\n  }\n\n}\n/**\n * Used to define datatable columns with attributes (columnName, fieldName, width, sortable, canAutoResize,\n * draggable, resizable, isDateColumn)\n */\nexport interface TgrMatTableColumn {\n  /**\n   * column title\n   */\n  columnName: string;\n  /**\n   * Server side response field corresponding to the column i.e fullName may correspond to Name column\n   */\n  fieldName: string;\n  /**\n   * Width of the column\n   */\n  width?: number;\n  /**\n   * Enable sorting in a column\n   */\n  sortable?: boolean;\n  // /**\n  //  * Makes a column resizable\n  //  */\n  // canAutoResize?: boolean;\n  // /**\n  //  * Enables a column to be draggable\n  //  */\n  // draggable?: boolean;\n  // /**\n  //  * Makes a column resizable\n  //  */\n  // resizeable?: boolean;\n  /**\n   * Used to enable formating timestamp to string date\n   */\n  isDateColumn?: boolean;\n  /**\n   * Hide on small device less than 576px\n   */\n  hideOnXs?: boolean;\n  /**\n   * Callback function used for cell rendering.\n   *  Note: Function results are not sanitised\n   */\n  callback?: Function;\n}\n\n/**\n * Used to display more actions column and the end of the table\n */\nexport class TgrMoreActions {\n  /**\n   * Action Column name e.g. More Actions\n   */\n  name: string = \"Actions\";\n  /**\n   * Field name id from the server response e.g userId\n   */\n  idFieldName: string = \"id\";\n  /**\n   * Actions e.g. Edit, Delete\n   */\n  actions: Array<TgrMoreActionData>;\n\n  constructor(actions: Array<TgrMoreActionData>, id?: string, name?: string) {\n    this.actions = actions;\n    this.name = name;\n    this.idFieldName = id;\n  }\n\n}\n\nexport interface TgrMoreActionData {\n  /**\n   * Never mind this field it will be used by the library\n   */\n  id?: any;\n  /**\n   * Action name e.g. Edit, Delete\n   */\n  actionName: any;\n}","import { Component, OnInit, Input, Output } from '@angular/core';\nimport { FormControl, NgForm } from '@angular/forms';\nimport { Subject, BehaviorSubject } from 'rxjs';\nimport { MatAutocompleteSelectedEvent } from '@angular/material';\nimport { StewardClientService, ResponseWrapper } from '../../public_api';\nimport { HttpClient, HttpHeaders, HttpErrorResponse, HttpParams } from '@angular/common/http';\nimport { Queue } from 'queue-typescript';\nimport { EventEmitter } from 'events';\n\n@Component({\n  selector: 'tgr-autocomplete',\n  template: `<mat-form-field class=\"full-width md-icon-left\">\n    <mat-icon *ngIf=\"icon\" matPrefix class=\"material-icons text-esoko-till icon-margin-right\">{{icon}}</mat-icon>\n    <input required matInput [placeholder]=\"inputAttribute.placeholder\" #textInput [formControl]=\"textControl\"\n      [matAutocomplete]=\"textInput\" />\n    <!-- <mat-hint class=\"text-danger\"\n      *ngIf=\"(agentInput.touched || agentInput.dirty) && agentInput.invalid && agentInput.errors.required\"\n      align=\"end\">Current agent is required</mat-hint> -->\n    <mat-autocomplete [autoActiveFirstOption]=\"true\" #textInput=\"matAutocomplete\" [displayWith]=\"displayVal\"\n      [disableRipple]=\"false\" (optionSelected)=\"setFieldId($event)\">\n      <mat-option *ngFor=\"let elem of searchElement | async\" [value]=\"elem\">\n        <div [innerHtml] = \"getFieldValue(elem)\"></div>\n      </mat-option>\n    </mat-autocomplete>\n  </mat-form-field>\n`,\n  styles: [``]\n})\nexport class TgrAutocompleteComponent implements OnInit {\n\n  /**\n   * Model object\n   */\n  model: Object = {};\n  /**\n   * Progress indicator\n   */\n  isLoading: boolean;\n  /**\n   * Text field control\n   */\n  textControl = new FormControl();\n  /**\n   * Retailer Rjx handler\n   */\n  searchElement: Subject<any> = new BehaviorSubject<any>([]);\n  /**\n   * Google material icon\n   */\n  @Input() icon: string;\n  /**\n   * Id field\n   */\n  @Input() inputAttribute: InputAttribute;\n  /**\n   * Request url\n   */\n  @Input() url: string;\n  /**\n   * custom http headers\n   */\n  @Input() httpHeaders: HttpHeaders;\n  /**\n   * Display value function\n   */\n  @Output() displayWith: Function;\n  /**\n   * Selection event function\n   */\n  @Output() optionSelected: Function;\n\n  /**\n   * Steward service client \n   * \n   * @param sterwardService \n   */\n  constructor(private client: StewardClientService<ResponseWrapper<any>, any>) { }\n\n  ngOnInit() {\n    this.client.get(this.url).subscribe(response => {\n      if(response.status == 200){\n        this.searchElement.next(response.data['content']);\n      }\n    })\n  }\n\n  /**\n   * Display name of the selected user\n   * \n   * @param val selected user\n   */\n  displayVal(val: any) {\n    // if(this.displayWith){\n    //   this.displayWith(val);\n    // }\n    return val == null ? '' : this.getFieldValue(val);\n  }\n\n  /**\n   * Set assignee agent it \n   * \n   * @param event \n   */\n  setFieldId(event: MatAutocompleteSelectedEvent){\n    // this.optionSelected(event);\n    this.model[this.inputAttribute.fieldId] = event.option.value[this.inputAttribute.fieldId];\n  }\n\n  /**\n   * Get field value\n   * \n   * @param elem \n   */\n  public getFieldValue(elem: any){\n    if (this.inputAttribute.callback) {\n      return this.inputAttribute.callback(elem);\n    }\n    var k: Array<string> = this.inputAttribute.fieldName.split(\".\");\n    var keys = new Queue<string>(...k);\n    return this.client.getObjectValue(elem, keys);\n  }\n\n}\n\nexport class InputAttribute{\n  \n  /**\n   * Field name\n   */\n  fieldName: string;\n  /**\n   * Field id\n   */\n  fieldId: string;\n  /**\n   * Callback function used for elements rendering.\n   *  Note: Function results are not sanitised\n   */\n  callback?: Function;\n  /**\n   * placeholder\n   */\n  placeholder: string;\n}\n","import { NgModule } from '@angular/core';\r\nimport { StewardClientComponent } from './steward-client.component';\r\nimport { CommonModule } from '@angular/common';\r\nimport { NgxDatatableModule } from '@swimlane/ngx-datatable';\r\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { StewardConfig } from './steward-client.service';\r\nimport { TgrMaterialTableComponent } from './tgr-material-table/tgr-material-table.component';\r\nimport {\r\n  MatInputModule, \r\n  MatTableModule, \r\n  MatCheckboxModule, \r\n  MatIconModule, \r\n  MatDatepickerModule, \r\n  MatNativeDateModule,\r\n  MatPaginatorModule,\r\n  MatSelectModule,\r\n  MatButtonModule,\r\n  MatSortModule,\r\n  MatMenuModule,\r\n  MatProgressSpinnerModule,\r\n  MatAutocompleteModule\r\n} from '@angular/material';\r\nimport { TgrAutocompleteComponent } from './tgr-autocomplete/tgr-autocomplete.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    NgxDatatableModule,\r\n    CommonModule,\r\n    HttpClientModule,\r\n    MatInputModule,\r\n    MatTableModule,\r\n    MatCheckboxModule,\r\n    MatIconModule,\r\n    MatDatepickerModule,\r\n    MatNativeDateModule,\r\n    MatPaginatorModule,\r\n    MatSelectModule,\r\n    MatButtonModule,\r\n    MatSortModule,\r\n    MatMenuModule,\r\n    MatProgressSpinnerModule,\r\n    MatAutocompleteModule\r\n  ],\r\n  declarations: [\r\n    StewardClientComponent, \r\n    TgrMaterialTableComponent,\r\n    TgrAutocompleteComponent\r\n  ],\r\n  exports: [StewardClientComponent, TgrMaterialTableComponent, TgrAutocompleteComponent]\r\n})\r\nexport class StewardClientModule {\r\n  static forRoot(config: StewardConfig) {\r\n    return {\r\n      ngModule: StewardClientModule,\r\n      providers: [ {provide: StewardConfig, useValue: config} ]\r\n    }\r\n  }\r\n }\r\n"],"names":["tslib_1.__extends","TgrAutocompleteComponent","InputAttribute"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAGA;;;;AAAA;;;0BAHA;IAgBC;;;;;;AChBD,IAOA;;;wBAPA;IAWC,CAAA;AAJD;;;;IAaI,8BAAoB,IAAgB,EAAU,MAAqB;QAA/C,SAAI,GAAJ,IAAI,CAAY;QAAU,WAAM,GAAN,MAAM,CAAe;wBAFhD,GAAG;QAGlB,IAAI,CAAC,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC;QAChC,IAAI,MAAM,CAAC,OAAO,EAAE;YAChB,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,cAAc,EAAE,iCAAiC,CAAC,CAAC;SAC3F;aAAM;YACH,IAAI,CAAC,OAAO,GAAG,IAAI,WAAW,CAAC;gBAC3B,cAAc,EAAE,iCAAiC;aACpD,CAAC,CAAC;SACN;QACD,IAAI,MAAM,CAAC,YAAY,EAAE;;YACrB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,eAAe,EAAE,SAAS,GAAG,MAAM,CAAC,YAAY,CAAC,CAAC;SACxF;KACJ;;;;;;;;;;;;IAOD,uCAAQ;;;;;;IAAR,UAAS,KAAa;QAClB,IAAI,IAAI,CAAC,MAAM,CAAC,YAAY,EAAE;;YAC1B,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,eAAe,EAAE,SAAS,GAAG,KAAK,CAAC,CAAC;SACxD;aAAM;;YACH,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,eAAe,EAAE,SAAS,GAAG,KAAK,CAAC,CAAC;SAC1E;KACJ;;;;;;;;;;;;;;IAOD,mCAAI;;;;;;;IAAJ,UAAK,QAAgB,EAAE,IAAO,EAAE,UAA2C;QAEvE,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,EAAE,OAAO,EAAE,UAAU,GAAG,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,GAAG,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC,IAAI,CAChJ,UAAU,CAAC,IAAI,CAAC,WAAW,EAAO,CAAC,CACtC,CAAC;KACL;;;;;;;;;;;;;IAOD,kCAAG;;;;;;;IAAH,UAAI,QAAgB,EAAE,IAAO,EAAE,UAA2C;QACtE,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,EAAE,OAAO,EAAE,UAAU,GAAG,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,GAAG,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC,IAAI,CAC/I,UAAU,CAAC,IAAI,CAAC,WAAW,EAAO,CAAC,CACtC,CAAC;KACL;;;;;;;;;;;;;;IAQD,qCAAM;;;;;;;IAAN,UAAO,QAAgB,EAAE,IAAO,EAAE,UAA2C;QACzE,OAAO,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,EAAE,EAAE,OAAO,EAAE,UAAU,GAAG,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,GAAG,IAAI,CAAC,OAAO,EAAE,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CACnK,UAAU,CAAC,IAAI,CAAC,WAAW,EAAO,CAAC,CACtC,CAAC;KACL;;;;;;;;;;;;;;IAQD,kCAAG;;;;;;;IAAH,UAAI,QAAgB,EAAE,IAA0B,EAAE,UAA2C;;QACzF,IAAM,OAAO,GAAG;YACZ,OAAO,EAAE,UAAU,GAAG,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,GAAG,IAAI,CAAC,OAAO;YACnE,MAAM,EAAE,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC;SACnC,CAAC;QACF,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,EAAE,OAAO,CAAC,CAAC,IAAI,CACzD,UAAU,CAAC,IAAI,CAAC,WAAW,EAAO,CAAC,CACtC,CAAC;KACL;;;;;;;;;;;;IAOD,sCAAO;;;;;;IAAP,UAAQ,QAAgB,EAAE,IAA0B;;QAChD,IAAM,OAAO,GAAG;YACZ,MAAM,EAAE,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC;SACnC,CAAC;QACF,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,GAAG,gBAAgB,GAAG,IAAI,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC,IAAI,CACzF,UAAU,CAAC,IAAI,CAAC,WAAW,EAAO,CAAC,CACtC,CAAC;KACL;;;;;;;;;;;;;;IAOD,2CAAY;;;;;;;IAAZ,UAAa,QAAgB,EAAE,IAAO,EAAE,OAAqB;;QACzD,IAAM,QAAQ,GAAa,IAAI,QAAQ,EAAE,CAAC;QAC1C,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,UAAC,GAAG;YAC1B,QAAQ,CAAC,MAAM,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;SACnC,CAAC,CAAC;QACH,IAAI,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,eAAe,CAAC,KAAK,CAAC,OAAO,CAAC,EAAE;YACjD,OAAO,GAAG,IAAI,WAAW,CAAC,EAAE,eAAe,EAAE,SAAS,GAAG,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;SAC1E;aAAM,IAAI,CAAC,OAAO,EAAE;YACjB,OAAO,GAAG,IAAI,WAAW,EAAE,CAAC;SAC/B;QACD,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,EAAE,QAAQ,EAAE,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC,CAAC,IAAI,CACjF,UAAU,CAAC,IAAI,CAAC,WAAW,EAAO,CAAC,CACtC,CAAC;KACL;;;;;;;;;;;;IAOD,oDAAqB;;;;;;IAArB,UAAsB,QAAgB,EAAE,IAAO;;QAC3C,IAAM,QAAQ,GAAa,IAAI,QAAQ,EAAE,CAAC;QAC1C,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,UAAC,GAAG;YAC1B,IAAI,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE;gBAC1B,IAAI,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,UAAA,EAAE;oBAChB,QAAQ,CAAC,MAAM,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;iBAC5B,CAAC,CAAC;aACN;iBAAM;gBACH,QAAQ,CAAC,MAAM,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;aACnC;SACJ,CAAC,CAAC;QACH,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,EAAE,QAAQ,EAAE,EAAE,OAAO,EAAE,IAAI,WAAW,CAAC,EAAE,eAAe,EAAE,SAAS,GAAG,IAAI,CAAC,KAAK,EAAE,CAAC,EAAE,CAAC,CAAC,IAAI,CACtI,UAAU,CAAC,IAAI,CAAC,WAAW,EAAO,CAAC,CACtC,CAAC;KACL;;;;;;;;;;;;IAOD,mDAAoB;;;;;;IAApB,UAAqB,QAAgB,EAAE,IAAO;;QAC1C,IAAM,QAAQ,GAAa,IAAI,QAAQ,EAAE,CAAC;QAC1C,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,UAAC,GAAG;YAC1B,IAAI,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE;gBAC1B,IAAI,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,UAAA,EAAE;oBAChB,QAAQ,CAAC,MAAM,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;iBAC5B,CAAC,CAAC;aACN;iBAAM;gBACH,QAAQ,CAAC,MAAM,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;aACnC;SACJ,CAAC,CAAC;QACH,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,EAAE,QAAQ,EAAE,EAAE,OAAO,EAAE,IAAI,WAAW,CAAC,EAAE,eAAe,EAAE,SAAS,GAAG,IAAI,CAAC,KAAK,EAAE,CAAC,EAAE,CAAC,CAAC,IAAI,CACrI,UAAU,CAAC,IAAI,CAAC,WAAW,EAAO,CAAC,CACtC,CAAC;KACL;;;;;;IAMO,4CAAa;;;;;cAAC,IAAyB;QAC3C,IAAI,IAAI,IAAI,SAAS,EAAE;YACnB,OAAO,IAAI,UAAU,EAAE,CAAC;SAC3B;;QACD,IAAI,UAAU,GAAe,IAAI,UAAU,EAAE,CAAC;QAC9C,IAAI,CAAC,OAAO,CAAC,UAAC,KAAa,EAAE,GAAW;YACpC,UAAU,GAAG,UAAU,CAAC,MAAM,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;SAC9C,CAAC,CAAC;QACH,OAAO,UAAU,CAAC;;;;;;;;IAMd,0CAAW;;;;;;;QACf,OAAO,UAAC,KAAwB;;YAC5B,IAAM,GAAG,GAAG,IAAI,eAAe,EAAE,CAAC;;YAElC,IAAI,KAAK,CAAC,MAAM,IAAI,GAAG,EAAE;gBACrB,GAAG,CAAC,MAAM,GAAG,KAAK,CAAC,MAAM,CAAC;gBAC1B,GAAG,CAAC,OAAO,GAAG,4DAA4D,CAAC;aAC9E;iBAAM;gBACH,GAAG,CAAC,MAAM,GAAG,KAAK,CAAC,MAAM,CAAC;gBAC1B,GAAG,CAAC,OAAO,GAAG,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC;gBAClC,GAAG,CAAC,IAAI,GAAG,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC;aAC/B;YACD,OAAO,EAAE,CAAC,GAAG,CAAC,CAAC;SAClB,CAAC;;;;;;;;;;IAKC,+BAAU;;;;;IAAjB,UAAkB,EAAO;QACrB,OAAO,6CAA6C,GAAG,EAAE,GAAG,wGAAwG,CAAC;KACxK;;;;;;;IAOM,+CAAgB;;;;;;cAAC,QAAgB,EAAE,IAA0B;;QAChE,IAAM,OAAO,GAAG;YACZ,OAAO,EAAE,IAAI,CAAC,OAAO;YACrB,MAAM,EAAE,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC;SACnC,CAAC;QACF,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,EAAE,OAAO,CAAC,CAAC,IAAI,CACzD,UAAU,CAAC,IAAI,CAAC,WAAW,EAAO,CAAC,CACtC,CAAC;;;;;;;IAOC,oCAAK;;;;;cAAC,GAAW;QACpB,IAAI;YACA,IAAI,GAAG,CAAC,GAAG,CAAC,CAAC;YACb,OAAO,IAAI,CAAC;SACf;QAAC,OAAO,CAAC,EAAE;YACR,OAAO,KAAK,CAAC;SAChB;;;;;;;;IAQE,yCAAU;;;;;;cAAC,GAAW;QACzB,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,GAAG,GAAG,IAAI,CAAC,QAAQ,GAAG,GAAG,CAAC;;;;;;;;IAQlD,6CAAc;;;;;;cAAC,IAAS,EAAE,IAAmB;;QAChD,IAAI,CAAC,EAAE,IAAI,YAAY,MAAM,CAAC,MAAM,IAAI,CAAC,MAAM,IAAI,CAAC,CAAC,EAAE;YACnD,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SAC1B;;QACD,IAAI,KAAK,GAAG,IAAI,CAAC;QACjB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,UAAC,GAAG;YAC1B,IAAI,CAAC,GAAG,IAAI,IAAI,CAAC,KAAK,MAAM,IAAI,CAAC,GAAG,CAAC,YAAY,MAAM,CAAC,EAAE;gBACtD,KAAK,GAAG,KAAI,CAAC,cAAc,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,IAAI,CAAC,CAAC;aAChD;iBAAM,IAAI,GAAG,IAAI,IAAI,CAAC,IAAI,EAAE;gBACzB,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC;aACrB;SACJ,CAAC,CAAC;QACH,OAAO,KAAK,CAAC;;;;;;;IAQV,4CAAa;;;;;cAAC,OAAuC;;QACxD,IAAI,aAAa,GAAgB,IAAI,CAAC,OAAO,CAAC;QAC9C,OAAO,CAAC,OAAO,CAAC,UAAC,GAAsB,EAAE,GAAW;YAChD,aAAa,GAAG,aAAa,CAAC,MAAM,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;SAClD,CAAC,CAAC;QACH,OAAO,aAAa,CAAC;;;gBA5Q5B,UAAU;;;;gBAZF,UAAU;gBAmBuC,aAAa;;+BApBvE;;;;;;;ACAA;IAaE;KAAiB;;;;IAEjB,yCAAQ;;;IAAR;KACC;;gBAdF,SAAS,SAAC;oBACT,QAAQ,EAAE,oBAAoB;oBAC9B,QAAQ,EAAE,sDAIT;oBACD,MAAM,EAAE,EAAE;iBACX;;;;iCAVD;;;;;;;;;;;ACGA;;;;AAAA;;;;;oBAImB,EAAE;;;;6BAIO,CAAC;;;;0BAIJ,CAAC;;;;qBAIL,IAAI;;;;oBAIL,KAAK;;;;uBAID,EAAE;;;;sBAIP,IAAI,IAAI,EAAE;;;;sBAIR,CAAC;;eAnCtB;IAoCC,CAAA;;;;AAID;;;AAAA;;sBACsB,KAAK;wBACH,IAAI;;eA1C5B;IA2CC;;;;;;;;;;ACxCD;;;;AAAA;IA0BI,2BAAY,KAAa,EAAE,IAAY,EAAE,WAAc,EAAE,IAAkC,EACvF,UAA2B,EAAE,WAA0B;QADF,qBAAA,EAAA,0BAAkC;QACvF,2BAAA,EAAA,kBAA2B;QAAE,4BAAA,EAAA,kBAA0B;;;;2BAHrC,EAAE;QAIpB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QAC/B,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAC7B,IAAI,CAAC,WAAW,GAAG,WAAW,GAAG,WAAW,GAAG,KAAK,CAAC;KACxD;4BArCL;IAuCC,CAAA;;;;;AAKD;;;;AAAA;IAsBI,kBAAY,IAAqB;QAArB,qBAAA,EAAA,aAAqB;QAC7B,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC;QAC9B,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;QACtB,IAAI,CAAC,GAAG,GAAG,UAAU,CAAC;KACzB;mBAvEL;IAwEC,CAAA;;;;AAKD;;;AAAA;IAkBI,qBAAY,IAAgB,EAAE,IAAgB;QAAlC,qBAAA,EAAA,QAAgB;QAAE,qBAAA,EAAA,QAAgB;QAC1C,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;QACtB,IAAI,CAAC,SAAS,GAAG,CAAC,CAAA;KACrB;sBApGL;IAqGC,CAAA;;;;AAKD;;;AAAA;IAMI,mBAAY,OAA+B;QACvC,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;KAC1B;oBAlHL;IAoHC,CAAA;IAED;IAUI,yBAAY,KAAa,EAAE,IAAmB;QAAnB,qBAAA,EAAA,WAAmB;QAC1C,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,IAAI,GAAG,IAAI,GAAG,IAAI,GAAG,KAAK,CAAC;KACnC;0BAnIL;IAqIC;;;;;;;;;ACpHD;;;AAAA;IAAoCA,kCAAiB;;;;;;;;;;;;;;;IAOnD,+BAAM;;;;;;IAAN,UAAO,IAAU,EAAE,aAAqB;QAEtC,IAAI,aAAa,KAAK,OAAO,EAAE;;YAE7B,IAAI,GAAG,GAAG,IAAI,CAAC,OAAO,EAAE,CAAC;;YACzB,IAAI,KAAK,GAAG,IAAI,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC;;YAChC,IAAM,IAAI,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;;YAChC,IAAI,SAAS,UAAS;;YACtB,IAAI,WAAW,UAAS;YAExB,IAAI,GAAG,GAAG,EAAE,EAAE;gBACZ,SAAS,GAAG,GAAG,GAAG,GAAG,CAAC;aACvB;iBAAM;gBACL,SAAS,GAAG,EAAE,GAAG,GAAG,CAAC;aACtB;YAED,IAAI,KAAK,GAAG,EAAE,EAAE;gBACd,WAAW,GAAG,GAAG,GAAG,KAAK,CAAC;aAC3B;iBAAM;gBACL,WAAW,GAAG,EAAE,GAAG,KAAK,CAAC;aAC1B;YAED,OAAU,IAAI,SAAI,WAAW,SAAI,SAAW,CAAC;SAC9C;QAED,OAAO,IAAI,CAAC,YAAY,EAAE,CAAC;KAC5B;yBAlDH;EAiBoC,iBAAiB,EAkCpD,CAAA;;;;AAID,IAAa,gBAAgB,GAC7B;IACE,KAAK,EAAE;QACL,SAAS,EAAE,EAAE,KAAK,EAAE,SAAS,EAAE,IAAI,EAAE,SAAS,EAAE,GAAG,EAAE,SAAS,EAAE;KACjE;IACD,OAAO,EAAE;QACP,SAAS,EAAE,OAAO;QAClB,cAAc,EAAE,EAAE,IAAI,EAAE,SAAS,EAAE,KAAK,EAAE,SAAS,EAAE;QACrD,aAAa,EAAE,EAAE,IAAI,EAAE,SAAS,EAAE,KAAK,EAAE,SAAS,EAAE,GAAG,EAAE,SAAS,EAAE;QACpE,kBAAkB,EAAE,EAAE,IAAI,EAAE,SAAS,EAAE,KAAK,EAAE,MAAM,EAAE;KACvD;CACF,CAAC;;IAyMA,mCAAoB,eAAsE;QAAtE,oBAAe,GAAf,eAAe,CAAuD;gCAlC7D,EAAE;yBACY,IAAI,cAAc,CAAM,IAAI,EAAE,EAAE,CAAC;4BACnD,IAAI,YAAY,EAAuB;uBAInB,EAAE;8BACZ,IAAI;4BAGd,IAAI,YAAY,EAAqB;gCACH,EAAE;kCAEtB,IAAI;gCACN,KAAK;wBAM/B,EAAE;sBAEI,EAAE;;;;gCAMA,KAAK;QAOtB,IAAI,CAAC,IAAI,GAAG,IAAI,IAAI,EAAE,CAAC;QACvB,IAAI,CAAC,IAAI,CAAC,OAAO,GAAG,EAAE,CAAC;QACvB,IAAI,CAAC,QAAQ,GAAG,IAAI,QAAQ,CAAC,OAAO,CAAC,CAAC;KACvC;;;;;;;;IAKD,4CAAQ;;;;IAAR;QAAA,iBAwCC;;QAtCC,IAAG,IAAI,CAAC,cAAc,EAAC;YACrB,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;SACxC;QACD,IAAG,IAAI,CAAC,gBAAgB,EAAC;YACvB,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SAClC;QACD,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,UAAA,CAAC;YACpB,KAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC;SACzC,CAAC,CAAC;QACH,IAAI,IAAI,CAAC,WAAW,EAAE;YACpB,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;SACvC;aAAM;YACL,OAAO,CAAC,KAAK,CAAC,mEAAmE,CAAC,CAAC;SACpF;;QACD,IAAI,KAAK,GAAG,EAAE,CAAC;QACf,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,UAAA,IAAI;;YAChC,IAAI,UAAU,GAAe,EAAE,CAAC;YAChC,IAAI,IAAI,CAAC,UAAU,EAAE;gBACnB,UAAU,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;aACtC;YAED,IAAI,IAAI,CAAC,WAAW,YAAY,QAAQ,IAAI,IAAI,CAAC,WAAW,YAAY,WAAW,EAAE;gBACnF,UAAU,CAAC,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC,CAAC;gBAClE,UAAU,CAAC,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC,CAAC;aACnE;YAED,IAAI,IAAI,CAAC,WAAW,YAAY,QAAQ,EAAE;gBACxC,UAAU,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,CAAC;gBACtD,UAAU,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,CAAC;aACvD;YACD,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,IAAI,WAAW,CAAC,EAAE,EAAE,UAAU,CAAC,CAAA;SACnD,CAAC,CAAC;;QAEH,KAAK,CAAC,MAAM,CAAC,GAAG,IAAI,WAAW,CAAC,EAAE,EAAE,UAAU,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC;QAC/D,KAAK,CAAC,IAAI,CAAC,GAAG,IAAI,WAAW,CAAC,EAAE,EAAE,UAAU,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC;QAC7D,KAAK,CAAC,QAAQ,CAAC,GAAG,IAAI,WAAW,CAAC,EAAE,EAAE,UAAU,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC;QACjE,IAAI,CAAC,UAAU,GAAG,IAAI,SAAS,CAAC,KAAK,CAAC,CAAC;QACvC,IAAI,CAAC,QAAQ,CAAC,EAAE,MAAM,EAAE,CAAC,EAAE,KAAK,EAAE,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,EAAE,IAAI,CAAC,CAAC;KAC3D;;;;;;;;IAKD,mDAAe;;;;IAAf;QACE,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;KACxC;;;;;;IAGD,iDAAa;;;;IAAb;;QACE,IAAM,WAAW,GAAG,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,MAAM,CAAC;;QACnD,IAAM,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC;QACzC,OAAO,WAAW,IAAI,OAAO,CAAC;KAC/B;;;;;;IAGD,gDAAY;;;;IAAZ;QAAA,iBAIC;QAHC,IAAI,CAAC,aAAa,EAAE;YAClB,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE;YACtB,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,UAAA,GAAG,IAAI,OAAA,KAAI,CAAC,SAAS,CAAC,MAAM,CAAC,GAAG,CAAC,GAAA,CAAC,CAAC;KAChE;;;;;;;;;;IAMD,iDAAa;;;;;IAAb,UAAc,KAAwB;QACpC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;KAC/B;;;;;;;;;;;;IAOD,4CAAQ;;;;;;IAAR,UAAS,QAAQ,EAAE,OAAO;QAA1B,iBAqCC;QApCC,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;YAClB,OAAO;SACR;QACD,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC;;QAC7B,IAAI,OAAO,CAAmB;QAC9B,IAAI,OAAO,EAAE;YACX,OAAO,GAAG,OAAO,CAAC;SACnB;aAAM;YACL,OAAO,GAAG,IAAI,GAAG,EAAE,CAAC;SACrB;QACD,IAAI,IAAI,CAAC,MAAM,EAAE;YACf,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,UAAC,KAAK,EAAE,GAAG;gBAC7B,IAAI,GAAG,IAAI,IAAI,IAAI,GAAG,IAAI,SAAS,EAAE;;oBACnC,OAAO,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;iBACzB;aACF,CAAC,CAAC;SACJ;QACD,OAAO,CAAC,GAAG,CAAC,MAAM,EAAE,QAAQ,CAAC,MAAM,CAAC,CAAC;QACrC,OAAO,CAAC,GAAG,CAAC,MAAM,EAAE,QAAQ,CAAC,KAAK,CAAC,CAAC;QACpC,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,EAAE,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC,SAAS,CAAC,UAAA,QAAQ;YAC/E,IAAI,QAAQ,CAAC,MAAM,IAAI,GAAG,EAAE;gBAC1B,IAAG,KAAI,CAAC,gBAAgB,EAAC;;oBACvB,IAAI,IAAE,GAAG,CAAC,IAAI,QAAQ,CAAC,IAAI,CAAC,MAAM,GAAG,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;oBACzD,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,UAAC,GAAG;wBAChC,GAAG,CAAC,IAAI,CAAC,GAAG,IAAE,EAAE,CAAC;qBAClB,CAAC,CAAC;iBACJ;gBACD,KAAI,CAAC,IAAI,GAAG,QAAQ,CAAC,IAAI,CAAC;aAC3B;YACD,KAAI,CAAC,gBAAgB,GAAG,KAAK,CAAC;SAC/B,EACC,UAAA,KAAK;YACH,OAAO,CAAC,KAAK,CAAC,2BAA2B,CAAC,CAAC;YAC3C,KAAI,CAAC,gBAAgB,GAAG,KAAK,CAAC;SAC/B,CAAC,CAAC;KAEN;;;;;;;;;;IAMD,6CAAS;;;;;IAAT,UAAU,IAAe;QACvB,IAAI,CAAC,QAAQ,CAAC,EAAE,KAAK,EAAE,IAAI,CAAC,QAAQ,EAAE,MAAM,EAAE,IAAI,CAAC,SAAS,EAAE,EAAE,IAAI,CAAC,UAAU,EAAE,CAAC,CAAC;KACpF;;;;;;;;;;IAOD,kDAAc;;;;;IAAd,UAAe,KAAW;QACxB,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;QACxB,IAAI,CAAC,QAAQ,CAAC,EAAE,KAAK,EAAE,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,MAAM,EAAE,CAAC,EAAE,EAAE,IAAI,CAAC,UAAU,EAAE,CAAC,CAAC;KACxE;;;;;IAKO,8CAAU;;;;;;;QAGhB,IAAI,CAAC,GAAqB,IAAI,GAAG,EAAE,CAAC;QACpC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,UAAC,GAAG,EAAE,GAAG;;YAElD,IAAI,KAAI,CAAC,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE;gBAC9B,IAAI,GAAG,IAAI,MAAM,IAAI,GAAG,IAAI,IAAI,EAAE;oBAChC,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,KAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,KAAI,CAAC,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE,YAAY,CAAC,CAAC,CAAC;iBAC/E;qBAAM;oBACL,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,KAAI,CAAC,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;iBACxC;aACF;SACF,CAAC,CAAA;;QAEF,IAAI,IAAI,CAAC,UAAU,EAAE;YACnB,CAAC,CAAC,GAAG,CAAC,MAAM,EAAE,IAAI,CAAC,UAAU,CAAC,MAAM,GAAG,GAAG,GAAG,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC;SACzE;QACD,OAAO,CAAC,CAAC;;;;;;;;;;;;;;;IAQX,iDAAa;;;;;;;IAAb,UAAc,IAAI;;QAEhB,IAAI,CAAC,QAAQ,CAAC,EAAE,MAAM,EAAE,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,KAAK,EAAE,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,EAAE,IAAI,CAAC,UAAU,EAAE,CAAC,CAAC;KACvF;;;;;;;;;;IAMD,2CAAO;;;;;IAAP,UAAQ,OAAY;QAClB,OAAO,OAAO,YAAY,QAAQ,CAAC;KACpC;;;;;;;;;;IAMD,4CAAQ;;;;;IAAR,UAAS,OAAY;QACnB,OAAO,OAAO,YAAY,SAAS,CAAC;KACrC;;;;;;;;;IAKD,8CAAU;;;;;IAAV,UAAW,OAAY;QACrB,OAAO,OAAO,YAAY,WAAW,CAAC;KACvC;;;;;;;;;;IAMD,oDAAgB;;;;;IAAhB,UAAiB,IAAI;;QACnB,IAAI,IAAI,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;;QAE9B,IAAI,KAAK,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,QAAQ,EAAE,EAAE,QAAQ,EAAE,CAAC;QAC7C,KAAK,GAAG,KAAK,CAAC,MAAM,GAAG,CAAC,GAAG,KAAK,GAAG,GAAG,GAAG,KAAK,CAAC;;QAE/C,IAAI,GAAG,GAAG,IAAI,CAAC,OAAO,EAAE,CAAC,QAAQ,EAAE,CAAC;QACpC,GAAG,GAAG,GAAG,CAAC,MAAM,GAAG,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;QAEvC,OAAO,IAAI,GAAG,GAAG,GAAG,KAAK,GAAG,GAAG,GAAG,GAAG,CAAC;KACvC;;;;;;IAED,iDAAa;;;;;IAAb,UAAc,IAAY,EAAE,MAAyB;QACnD,IAAI,MAAM,CAAC,QAAQ,EAAE;YACnB,OAAO,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;SAC9B;;QACD,IAAI,CAAC,GAAkB,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;;QACnD,IAAI,IAAI,QAAO,KAAK,YAAL,KAAK,qBAAY,CAAC,MAAE;;QACnC,IAAI,KAAK,GAAG,IAAI,CAAC,eAAe,CAAC,cAAc,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;QAC5D,OAAO,MAAM,CAAC,YAAY,GAAG,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,KAAK,EAAE,QAAQ,CAAC,GAAG,KAAK,CAAC;KAC/E;;;;;;;;IAKD,gDAAY;;;;IAAZ;QACE,OAAO,CAAC,KAAK,CAAC,uBAAuB,CAAC,CAAC;;QAEvC,IAAI,CAAC,QAAQ,CAAC,EAAE,MAAM,EAAE,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,KAAK,EAAE,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,EAAE,IAAI,CAAC,UAAU,EAAE,CAAC,CAAC;KACvF;;gBA9aF,SAAS,SAAC;oBACT,QAAQ,EAAE,oBAAoB;oBAC9B,QAAQ,EAAE,6kRAuJL;oBACL,MAAM,EAAE,CAAC,+SAA+S,CAAC;oBACzT,SAAS,EAAE;wBACT,EAAE,OAAO,EAAE,WAAW,EAAE,QAAQ,EAAE,cAAc,EAAE;wBAClD;4BACE,OAAO,EAAE,gBAAgB,EAAE,QAAQ,EAAE,gBAAgB;yBACtD;qBACF;iBACF;;;;gBAjOQ,oBAAoB;;;4BAqO1B,MAAM;+BACN,MAAM;uBACN,SAAS,SAAC,OAAO;0BAGjB,KAAK;iCACL,KAAK;2BACL,KAAK;8BACL,KAAK;+BACL,MAAM;mCACN,KAAK;yBACL,KAAK;qCACL,KAAK;mCACL,KAAK;0BAIL,KAAK;wBAGL,SAAS,SAAC,kBAAkB;;oCA9P/B;;;;;AAyiBA;;;AAAA;IAcE,wBAAY,OAAiC,EAAE,EAAW,EAAE,IAAa;;;;oBAV1D,SAAS;;;;2BAIF,IAAI;QAOxB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,WAAW,GAAG,EAAE,CAAC;KACvB;yBA3jBH;IA6jBC;;;;;;;;;;;;ICjfC,qCAAoB,MAAuD;QAAvD,WAAM,GAAN,MAAM,CAAiD;;;;qBA3C3D,EAAE;;;;2BAQJ,IAAI,WAAW,EAAE;;;;6BAID,IAAI,eAAe,CAAM,EAAE,CAAC;KA+BsB;;;;IAEhFC,8CAAQ;;;IAAR;QAAA,iBAMC;QALC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,SAAS,CAAC,UAAA,QAAQ;YAC1C,IAAG,QAAQ,CAAC,MAAM,IAAI,GAAG,EAAC;gBACxB,KAAI,CAAC,aAAa,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;aACnD;SACF,CAAC,CAAA;KACH;;;;;;;;;;;;IAODA,gDAAU;;;;;;IAAV,UAAW,GAAQ;;;;QAIjB,OAAO,GAAG,IAAI,IAAI,GAAG,EAAE,GAAG,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;KACnD;;;;;;;;;;;;IAODA,gDAAU;;;;;;IAAV,UAAW,KAAmC;;QAE5C,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,GAAG,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;KAC3F;;;;;;;IAOMA,mDAAa;;;;;;cAAC,IAAS;QAC5B,IAAI,IAAI,CAAC,cAAc,CAAC,QAAQ,EAAE;YAChC,OAAO,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;SAC3C;;QACD,IAAI,CAAC,GAAkB,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;;QAChE,IAAI,IAAI,QAAO,KAAK,YAAL,KAAK,qBAAY,CAAC,MAAE;QACnC,OAAO,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;;;gBA9GjD,SAAS,SAAC;oBACT,QAAQ,EAAE,kBAAkB;oBAC5B,QAAQ,EAAE,+6BAcX;oBACC,MAAM,EAAE,CAAC,EAAE,CAAC;iBACb;;;;gBAvBQ,oBAAoB;;;uBA6C1B,KAAK;iCAIL,KAAK;sBAIL,KAAK;8BAIL,KAAK;8BAIL,MAAM;iCAIN,MAAM;;sCArET;;IA4HAC;;;4BA5HA;IA+IC;;;;;;AC/ID;;;;;;;IAsDS,2BAAO;;;;IAAd,UAAe,MAAqB;QAClC,OAAO;YACL,QAAQ,EAAE,mBAAmB;YAC7B,SAAS,EAAE,CAAE,EAAC,OAAO,EAAE,aAAa,EAAE,QAAQ,EAAE,MAAM,EAAC,CAAE;SAC1D,CAAA;KACF;;gBAlCF,QAAQ,SAAC;oBACR,OAAO,EAAE;wBACP,WAAW;wBACX,mBAAmB;wBACnB,kBAAkB;wBAClB,YAAY;wBACZ,gBAAgB;wBAChB,cAAc;wBACd,cAAc;wBACd,iBAAiB;wBACjB,aAAa;wBACb,mBAAmB;wBACnB,mBAAmB;wBACnB,kBAAkB;wBAClB,eAAe;wBACf,eAAe;wBACf,aAAa;wBACb,aAAa;wBACb,wBAAwB;wBACxB,qBAAqB;qBACtB;oBACD,YAAY,EAAE;wBACZ,sBAAsB;wBACtB,yBAAyB;wBACzBD,2BAAwB;qBACzB;oBACD,OAAO,EAAE,CAAC,sBAAsB,EAAE,yBAAyB,EAAEA,2BAAwB,CAAC;iBACvF;;8BApDD;;;;;;;;;;;;;;;"}
