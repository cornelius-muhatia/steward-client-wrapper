{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://steward-client/lib/entities/wrappers/response-wrapper.ts","ng://steward-client/lib/steward-client.service.ts","ng://steward-client/lib/steward-client.component.ts","ng://steward-client/lib/entities/wrappers/page.ts","ng://steward-client/lib/entities/tgr-dynamic-control.ts","ng://steward-client/lib/tgr-material-table/tgr-material-table.component.ts","ng://steward-client/lib/steward-client.module.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","StewardConfig","StewardClientService","http","config","this","base_url","headers","append","HttpHeaders","Content-Type","access_token","prototype","setToken","token","set","post","endpoint","data","addHeaders","serviceURL","JSON","stringify","appendHeaders","pipe","catchError","handleError","put","delete","request","body","get","options","params","getHttpParams","getFile","postFormData","formData","FormData","keys","forEach","key","Authorization","postFormDataMultipart","isArray","k2","putFormDataMultiPart","undefined","HttpParams","httpParams","value","error","res","ResponseWrapper","status","message","of","renderMore","id","intiateDataTable","isURL","url","URL","_","getObjectValue","_this","length","entries","customHeaders","val","Injectable","HttpClient","StewardClientComponent","ngOnInit","Component","args","selector","template","size","totalElements","totalPages","first","last","content","sorted","Sort","number","unsorted","label","name","controlType","icon","isRequired","placeholder","type","minLength","min","maxLength","max","cols","rows","TgrSelectOption","text","AppDateAdapter","__","constructor","create","tslib_1.__extends","format","date","displayFormat","day","getDate","month","getMonth","getFullYear","toDateString","NativeDateAdapter","APP_DATE_FORMATS","parse","dateInput","year","display","monthYearLabel","dateA11yLabel","monthYearA11yLabel","TgrMaterialTableComponent","sterwardService","displayedColumns","selection","SelectionModel","rowSelection","EventEmitter","columns","enableCheckbox","actionsEvent","filterComponents","showDefaultFilters","showNumberColumn","selected","filter","isLoadingResults","page","Page","datePipe","DatePipe","push","c","fieldName","moreActions","console","debug","group","comp","validators","Validators","required","TgrInput","TgrTextarea","FormControl","filterForm","FormGroup","loadPage","offset","limit","ngAfterViewInit","emit","isAllSelected","masterToggle","clear","row","select","onActionClick","event","pageInfo","filters","Map","subscribe","response","no_1","pageEvent","pageSize","pageIndex","getFilters","processSorting","sortParams","f","transform","active","direction","processFilter","form","isInput","control","isSelect","TgrSelect","isTextArea","getFormattedDate","toString","getFieldValue","column","callback","k","split","isDateColumn","refreshTable","providers","provide","DateAdapter","useClass","MAT_DATE_FORMATS","useValue","Output","ViewChild","MatSort","static","Input","actions","idFieldName","StewardClientModule","forRoot","ngModule","NgModule","imports","FormsModule","ReactiveFormsModule","CommonModule","HttpClientModule","MatInputModule","MatTableModule","MatCheckboxModule","MatIconModule","MatDatepickerModule","MatNativeDateModule","MatPaginatorModule","MatSelectModule","MatButtonModule","MatSortModule","MatMenuModule","MatProgressSpinnerModule","MatAutocompleteModule","declarations","exports"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * Wraps server response\n */\nexport class ResponseWrapper<T> {\n    /**\n     * Http status code e.g. 200\n     */\n    status: number;\n    /**\n     * Server message\n     */\n    message: string;\n    /**\n     * Actual response data\n     */\n    data: T;\n}\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders, HttpErrorResponse, HttpParams } from '@angular/common/http';\r\nimport { Observable, of } from 'rxjs';\r\nimport { catchError, map, tap } from 'rxjs/operators';\r\nimport { ResponseWrapper } from './entities/wrappers/response-wrapper';\r\n\r\nexport class StewardConfig {\r\n    base_url: string;\r\n    access_token?: string;\r\n    headers?: HttpHeaders;\r\n}\r\n\r\n@Injectable()\r\nexport class StewardClientService<T, E> {\r\n\r\n    private headers: HttpHeaders;\r\n    token: string;\r\n    base_url: string = \"/\";\r\n\r\n    constructor(private http: HttpClient, private config: StewardConfig) {\r\n        this.base_url = config.base_url;\r\n        if (config.headers) {\r\n            this.headers = config.headers.append('Content-Type', 'application/json; charset=utf-8');\r\n        } else {\r\n            this.headers = new HttpHeaders({\r\n                'Content-Type': 'application/json; charset=utf-8'\r\n            });\r\n        }\r\n        if (config.access_token) {//append access token if the environment has access token\r\n            this.headers = this.headers.append('Authorization', \"Bearer \" + config.access_token);\r\n        }\r\n    }\r\n\r\n    /**\r\n     *  Used to update authorization token. Currently supports bearer token\r\n     *\r\n     * @param token\r\n     */\r\n    setToken(token: string) {\r\n        if (this.config.access_token) {//update token header\r\n            this.headers.set(\"Authorization\", \"Bearer \" + token);\r\n        } else {//append access token if the environment has access token\r\n            this.headers = this.headers.append('Authorization', \"Bearer \" + token);\r\n        }\r\n    }\r\n    /**\r\n     * Used to handle http post requests\r\n     * @param endpoint expects either an endpoint or url\r\n     * @param data a valid object\r\n     * @param addHeaders additional headers to be appended to existing headers\r\n     */\r\n    post(endpoint: string, data: T, addHeaders?: Map<string, string | string[]>): Observable<ResponseWrapper<E>> {\r\n\r\n        return this.http.post(this.serviceURL(endpoint), JSON.stringify(data), { headers: addHeaders ? this.appendHeaders(addHeaders) : this.headers }).pipe(\r\n            catchError(this.handleError<any>())\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Used to handle http post requests\r\n     * @param endpoint expects either an endpoint or url\r\n     * @param addHeaders additional headers to be appended to existing headers\r\n     */\r\n    put(endpoint: string, data: T, addHeaders?: Map<string, string | string[]>): Observable<ResponseWrapper<E>> {\r\n        return this.http.put(this.serviceURL(endpoint), JSON.stringify(data), { headers: addHeaders ? this.appendHeaders(addHeaders) : this.headers }).pipe(\r\n            catchError(this.handleError<any>())\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Handles http delete request\r\n     * @param endpoint expects either an endpoint or url\r\n     * @param data\r\n     * @param addHeaders additional headers to be appended to existing headers\r\n     */\r\n    delete(endpoint: string, data: T, addHeaders?: Map<string, string | string[]>): Observable<ResponseWrapper<E>> {\r\n        return this.http.request('delete', this.serviceURL(endpoint), { headers: addHeaders ? this.appendHeaders(addHeaders) : this.headers, body: JSON.stringify(data) }).pipe(\r\n            catchError(this.handleError<any>())\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Handles http get request\r\n     * @param endpoint expects either an endpoint or url\r\n     * @param data request params\r\n     * @param addHeaders additional headers to be appended to existing headers\r\n     */\r\n    get(endpoint: string, data?: Map<string, string>, addHeaders?: Map<string, string | string[]>): Observable<ResponseWrapper<E>> {\r\n        const options = {\r\n            headers: addHeaders ? this.appendHeaders(addHeaders) : this.headers,\r\n            params: this.getHttpParams(data)\r\n        };\r\n        return this.http.get(this.serviceURL(endpoint), options).pipe(\r\n            catchError(this.handleError<any>())\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Fetch a file\r\n     * @param endpoint expects either an endpoint or url\r\n     * @param data\r\n     */\r\n    getFile(endpoint: string, data?: Map<string, string>): Observable<ResponseWrapper<E>> {\r\n        const options = {\r\n            params: this.getHttpParams(data)\r\n        };\r\n        return this.http.get(this.serviceURL(endpoint) + '?access_token=' + this.token, options).pipe(\r\n            catchError(this.handleError<any>())\r\n        );\r\n    }\r\n    /**\r\n     * if\r\n     * @param endpoint expects either an endpoint or url\r\n     * @param data\r\n     * @param headers\r\n     */\r\n    postFormData(endpoint: string, data: T, headers?: HttpHeaders): Observable<ResponseWrapper<E>> {\r\n        const formData: FormData = new FormData();\r\n        Object.keys(data).forEach((key) => {\r\n            formData.append(key, data[key]);\r\n        });\r\n        if (this.headers.get(\"Authorization\") && (!headers)) {\r\n            headers = new HttpHeaders({ 'Authorization': 'Bearer ' + this.token });\r\n        } else if (!headers) {\r\n            headers = new HttpHeaders();\r\n        }\r\n        return this.http.post(this.serviceURL(endpoint), formData, { headers: headers }).pipe(\r\n            catchError(this.handleError<any>())\r\n        );\r\n    }\r\n\r\n    /**\r\n     * handle http form data request\r\n     * @param endpoint expects either an endpoint or url\r\n     * @param data expects a valid object\r\n     */\r\n    postFormDataMultipart(endpoint: string, data: T): Observable<ResponseWrapper<E>> {\r\n        const formData: FormData = new FormData();\r\n        Object.keys(data).forEach((key) => {\r\n            if (Array.isArray(data[key])) {\r\n                data[key].forEach(k2 => {\r\n                    formData.append(key, k2);\r\n                });\r\n            } else {\r\n                formData.append(key, data[key]);\r\n            }\r\n        });\r\n        return this.http.post(this.serviceURL(endpoint), formData, { headers: new HttpHeaders({ 'Authorization': 'Bearer ' + this.token }) }).pipe(\r\n            catchError(this.handleError<any>())\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Handles http put form data request\r\n     * @param endpoint expects either an endpoint or url\r\n     * @param data valid object\r\n     */\r\n    putFormDataMultiPart(endpoint: string, data: T): Observable<ResponseWrapper<E>> {\r\n        const formData: FormData = new FormData();\r\n        Object.keys(data).forEach((key) => {\r\n            if (Array.isArray(data[key])) {\r\n                data[key].forEach(k2 => {\r\n                    formData.append(key, k2);\r\n                });\r\n            } else {\r\n                formData.append(key, data[key]);\r\n            }\r\n        });\r\n        return this.http.put(this.serviceURL(endpoint), formData, { headers: new HttpHeaders({ 'Authorization': 'Bearer ' + this.token }) }).pipe(\r\n            catchError(this.handleError<any>())\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Convert map to HttpParams\r\n     * @param data\r\n     */\r\n    private getHttpParams(data: Map<string, string>): HttpParams {\r\n        if (data == undefined) {\r\n            return new HttpParams();\r\n        }\r\n        let httpParams: HttpParams = new HttpParams();\r\n        data.forEach((value: string, key: string) => {\r\n            httpParams = httpParams.append(key, value);\r\n        });\r\n        return httpParams;\r\n    }\r\n    /**\r\n     * Used to catch exception thrown by http client returns internal server error\r\n     * if status 500 is encountered\r\n     */\r\n    private handleError<ResponseWrapper>() {\r\n        return (error: HttpErrorResponse): Observable<any> => {\r\n            const res = new ResponseWrapper();\r\n            //            console.error(error); // log to console instead\r\n            if (error.status == 500) {\r\n                res.status = error.status;\r\n                res.message = 'Sorry internal server error occured please try again later';\r\n            } else {\r\n                res.status = error.status;\r\n                res.message = error.error.message;\r\n                res.data = error.error.data;\r\n            }\r\n            return of(res);\r\n        };\r\n    }\r\n    /**\r\n     * Used to render action buttons\r\n     */\r\n    static renderMore(id: any) {\r\n        return '<div class=\\'actions-buttons center\\' id=\\'' + id + '\\'><i class=\\'fa fa-check\\' title=\\'Approve\\'></i> <i class=\\'fa fa-ban\\' title=\\'Decline\\'></i></div>';\r\n    }\r\n\r\n    /**\r\n     * Handles datatable request\r\n     * @param endpoint expects either an endpoint or url\r\n     * @param data expects a valid map\r\n     */\r\n    public intiateDataTable(endpoint: string, data?: Map<string, string>) {\r\n        const options = {\r\n            headers: this.headers,\r\n            params: this.getHttpParams(data)\r\n        };\r\n        return this.http.get(this.serviceURL(endpoint), options).pipe(\r\n            catchError(this.handleError<any>())\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Used to validate if a string is a valid URL\r\n     * @param url\r\n     */\r\n    public isURL(url: string): boolean {\r\n        try {\r\n            new URL(url);\r\n            return true;\r\n        } catch (_) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * If the url parameter is an endpoint it appends to the base url\r\n     * @param url\r\n     * @see base_url\r\n     */\r\n    public serviceURL(url: string): string {\r\n        return (this.isURL(url)) ? url : this.base_url + url;\r\n    }\r\n\r\n    /**\r\n   * Used to find key value based on the key sequence provided\r\n   * @param data expects an object\r\n   * @param keys i.e. user.gender.type.type\r\n   */\r\n    public getObjectValue(data: any, keys: Array<string>) {\r\n        if ((!(data instanceof Object)) || (keys.length === 1)) {\r\n            return data[keys[keys.length - 1]];\r\n        }\r\n        let value = null;\r\n        Object.keys(data).forEach((key) => {\r\n            if ((key === keys[0]) && (data[key] instanceof Object)) {\r\n                value = this.getObjectValue(data[key], keys);\r\n            } else if (key === keys[keys.length - 1]) {\r\n                value = data[key];\r\n            }\r\n        });\r\n        return value;\r\n\r\n    }\r\n\r\n    /**\r\n     * Used to append headers the current httpHeaders\r\n     * @returns merged headers\r\n     */\r\n    public appendHeaders(entries: Map<String, string | string[]>): HttpHeaders{\r\n        let customHeaders: HttpHeaders = this.headers;\r\n        entries.forEach((val: string | string[], key: string) => {\r\n            customHeaders = customHeaders.append(key, val);\r\n        });\r\n        return customHeaders;\r\n    }\r\n}\r\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'lib-steward-client',\n  template: `\n    <p>\n      steward-client works!\n    </p>\n  `,\n  styles: []\n})\nexport class StewardClientComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","/**\n * Datable page used to wrapper server content response\n */\nexport class Page<T> {\n    /**\n     * Number of items per page same as limit\n     */\n    size: number = 20;\n    /**\n     * Total items available on the server\n     */\n    totalElements: number = 0;\n    /**\n     * Total number of pages present\n     */\n    totalPages: number = 0;\n    /**\n     * Checks if is the first page\n     */\n    first: boolean = true;\n    /**\n     * Checks if it is the last page\n     */\n    last: boolean = false;\n    /**\n     * The actual page content\n     */\n    content: Array<T> = [];\n    /**\n     * Used to map sort parameters\n     */\n    sorted: Sort = new Sort();\n    /**\n     * Current page number\n     */\n    number: number = 0;\n}\n/**\n * used to map sort request\n */\nexport class Sort{\n    sorted: boolean = false;\n    unsorted: boolean = true;\n}\n","/**\n * Represents dynamic html controls (Input, TextArea and Select)\n */\nexport class TgrDynamicControl<T> {\n    /**\n     * Control label\n     */\n    label: string;\n    /**\n     * Icon to be appended before the control (supports class defined icons)\n     */\n    icon: string;\n    /**\n     * Name of the control (provide variable valid names ie. no spaces prefarably api corresponding names e.g. userName)\n     */\n    name: string;\n    /**\n     * The actual control (TgrInput, TgrTextArea & TgrSelect)\n     */\n    controlType: T;\n    /**\n     * Checks if the field is required\n     */\n    isRequired: boolean;\n    /**\n     * Control placeholder\n     */\n    placeholder: string = \"\";\n\n    constructor(label: string, name: string, controlType: T, icon: string = \"fa fa-file-text-o\",\n        isRequired: boolean = false, placeholder: string = null) {\n        this.label = label;\n        this.name = name;\n        this.controlType = controlType;\n        this.icon = icon;\n        this.isRequired = isRequired;\n        this.placeholder = placeholder ? placeholder : label;\n    }\n\n}\n/**\n * Used to represent html input with options:\n * type: default to text,  maxLength, minLength, min, max\n */\nexport class TgrInput{\n    /**\n     * Type of input e.g. text, number, date\n     */\n    type: string;\n    /**\n     * Used to validate length of the input\n     */\n    maxLength: number;\n    /**\n     * Used to validate minimum input length\n     */\n    minLength: number;\n    /**\n     * Used to validate number inputs\n     */\n    min: number;\n    /**\n     * Used to validate number inputs\n     */\n    max: number;\n\n    constructor(type: string = \"text\") {\n        this.type = type;\n        this.minLength = this.min = 0;\n        this.maxLength = 4000;\n        this.max = 1000000000;\n    }\n}\n\n/**\n * Represents html textarea input\n */\nexport class TgrTextarea{\n    /**\n     * Number textarea columns\n     */\n    cols?: number;\n    /**\n     * Number of textarea rows\n     */\n    rows?: number;\n    /**\n     * Validate maximum input length\n     */\n    maxLength: number;\n    /**\n     * Validate minimum input length\n     */\n    minLength: number;\n\n    constructor(cols: number = 5, rows: number = 1){\n        this.cols = cols;\n        this.rows = rows;\n        this.maxLength = 4000;\n        this.minLength = 0\n    }\n}\n\n/**\n * Represents html select control\n */\nexport class TgrSelect {\n    /**\n     * Select options\n     */\n    options: Array<TgrSelectOption>;\n\n    constructor(options: Array<TgrSelectOption>){\n        this.options = options;\n    }\n\n}\n\nexport class TgrSelectOption{\n    /**\n     * Option value\n     */\n    value: string | number;\n    /**\n     * Option text/label\n     */\n    text: string;\n\n    constructor(value: string, text: string = null){\n        this.value = value;\n        this.text = text ? text : value;\n    }\n\n}\n\n","import { Component, OnInit, EventEmitter, Input, Output, ViewChild, AfterViewInit } from '@angular/core';\nimport { NgForm, FormGroup, FormControl, Validators } from '@angular/forms';\nimport { Page } from '../entities/wrappers/page';\nimport { MlkDynamicControl, MlkInput, MlkTextarea, MlkSelect } from '../entities/wrappers/mlk-dynamic-control';\nimport { ResponseWrapper } from '../entities/wrappers/response-wrapper';\nimport { StewardClientService } from '../steward-client.service';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { DateAdapter, MAT_DATE_FORMATS, MAT_DATE_LOCALE } from '@angular/material/core';\nimport { NativeDateAdapter, PageEvent, MatSort, Sort } from \"@angular/material\";\nimport { TgrDynamicControl, TgrInput, TgrSelect, TgrTextarea } from '../entities/tgr-dynamic-control';\nimport { DatePipe } from '@angular/common';\n\n/**\n * Format angular date to dd-mm-yyyy\n */\nexport class AppDateAdapter extends NativeDateAdapter {\n\n  /**\n   * Parse date to dd-mm-yyyy\n   * @param date  date input\n   * @param displayFormat expects to be input string\n   */\n  format(date: Date, displayFormat: Object): string {\n\n    if (displayFormat === 'input') {\n\n      var day = date.getDate();\n      var month = date.getMonth() + 1;\n      const year = date.getFullYear();\n      let dayString: string;\n      let monthString: string;\n\n      if (day < 10) {\n        dayString = '0' + day;\n      } else {\n        dayString = '' + day;\n      }\n\n      if (month < 10) {\n        monthString = '0' + month;\n      } else {\n        monthString = '' + month;\n      }\n\n      return `${year}-${monthString}-${dayString}`;\n    }\n\n    return date.toDateString();\n  }\n}\n/**\n * Material date formats\n */\nexport const APP_DATE_FORMATS =\n{\n  parse: {\n    dateInput: { month: 'numeric', year: 'numeric', day: 'numeric' },\n  },\n  display: {\n    dateInput: 'input',\n    monthYearLabel: { year: 'numeric', month: 'numeric' },\n    dateA11yLabel: { year: 'numeric', month: 'numeric', day: 'numeric' },\n    monthYearA11yLabel: { year: 'numeric', month: 'long' },\n  }\n};\n\n\n@Component({\n  selector: 'tgr-material-table',\n  templateUrl: './tgr-material-table.component.html',\n  styleUrls: ['./tgr-material-table.component.css'],\n  providers: [\n    { provide: DateAdapter, useClass: AppDateAdapter },\n    {\n      provide: MAT_DATE_FORMATS, useValue: APP_DATE_FORMATS\n    }\n  ]\n})\nexport class TgrMaterialTableComponent implements OnInit, AfterViewInit {\n\n  displayedColumns: string[] = [];\n  @Output() selection: SelectionModel<any> = new SelectionModel<any>(true, []);\n  @Output() rowSelection = new EventEmitter<SelectionModel<any>>();\n  @ViewChild(MatSort, {static: true}) sort: MatSort;\n\n\n  @Input() columns: Array<TgrMatTableColumn> = [];\n  @Input() enableCheckbox: boolean = true;\n  @Input() endpoint: string;\n  @Input() moreActions: TgrMoreActions;\n  @Output() actionsEvent = new EventEmitter<TgrMoreActionData>()\n  @Input() filterComponents: Array<TgrDynamicControl<any>> = [];\n  @Input() params: Map<string, any>;\n  @Input() showDefaultFilters: boolean = true;\n  @Input() showNumberColumn: boolean = false;\n  /**\n   * Additional headers to be appended on the request headers\n   */\n  @Input() headers: Map<string, string | string[]>;\n  page: Page<any>;\n  selected = [];\n  // @ViewChild(DatatableComponent) table: DatatableComponent;\n  filter: Object = {};\n  filterForm: FormGroup;\n  private sortParams: Sort;\n  /**\n   * Checks if server request has been processed\n   */\n  isLoadingResults = false;\n  /**\n   * Date pipe\n   */\n  private datePipe: DatePipe\n\n  constructor(private sterwardService: StewardClientService<ResponseWrapper<Page<any>>, any>) {\n    this.page = new Page();\n    this.page.content = [];\n    this.datePipe = new DatePipe(\"en-US\");\n  }\n\n  /**\n   * Generate form control from filterComponents and also appending default controls ie. date filter and search controls\n   */\n  ngOnInit() {\n    //intializing table columns\n    if(this.enableCheckbox){\n      this.displayedColumns.push(\"checkbox\");\n    }\n    if(this.showNumberColumn){\n      this.displayedColumns.push(\"no\");\n    }\n    this.columns.forEach(c => {\n      this.displayedColumns.push(c.fieldName);\n    });\n    if (this.moreActions) {\n      this.displayedColumns.push(\"actions\");\n    } else {\n      console.debug(\"moreActions not injected skipping rendering 'More Actions' column\");\n    }\n    let group = {};\n    this.filterComponents.forEach(comp => {\n      let validators: Array<any> = [];\n      if (comp.isRequired) {\n        validators.push(Validators.required);\n      }\n\n      if (comp.controlType instanceof TgrInput || comp.controlType instanceof TgrTextarea) {\n        validators.push(Validators.minLength(comp.controlType.minLength));\n        validators.push(Validators.maxLength(comp.controlType.maxLength));\n      }\n\n      if (comp.controlType instanceof TgrInput) {\n        validators.push(Validators.max(comp.controlType.max));\n        validators.push(Validators.min(comp.controlType.min));\n      }\n      group[comp.name] = new FormControl('', validators)\n    });\n    //add default controls\n    group['from'] = new FormControl('', Validators.maxLength(100));\n    group['to'] = new FormControl('', Validators.maxLength(100));\n    group['needle'] = new FormControl('', Validators.maxLength(200));\n    this.filterForm = new FormGroup(group);\n    this.loadPage({ offset: 0, limit: this.page.size }, null);\n  }\n\n  /**\n   * After view intialization fire selection event\n   */\n  ngAfterViewInit(): void {\n    this.rowSelection.emit(this.selection);\n  }\n\n  /** Whether the number of selected elements matches the total number of rows. */\n  isAllSelected() {\n    const numSelected = this.selection.selected.length;\n    const numRows = this.page.content.length;\n    return numSelected == numRows;\n  }\n\n  /** Selects all rows if they are not all selected; otherwise clear selection. */\n  masterToggle() {\n    this.isAllSelected() ?\n      this.selection.clear() :\n      this.page.content.forEach(row => this.selection.select(row));\n  }\n\n  /**\n   * Used to emit click event of the actions\n   * @param event\n   */\n  onActionClick(event: TgrMoreActionData) {\n    this.actionsEvent.emit(event);\n  }\n\n  /**\n   * Process server request of datable\n   * @param pageInfo\n   * @param filters\n   */\n  loadPage(pageInfo, filters) {\n    if (!this.endpoint) {\n      return;\n    }\n    this.isLoadingResults = true;\n    let request: Map<string, any>;\n    if (filters) {\n      request = filters;\n    } else {\n      request = new Map();\n    }\n    if (this.params) {\n      this.params.forEach((value, key) => {\n        if (key != null && key != undefined) { //ignore null values\n          request.set(key, value);\n        }\n      });\n    }\n    request.set(\"page\", pageInfo.offset);\n    request.set(\"size\", pageInfo.limit);\n    this.sterwardService.get(this.endpoint, request, this.headers).subscribe(response => {\n      if (response.status == 200) {\n        if(this.showNumberColumn){\n          let no = 1 + (response.data.number * response.data.size);\n          response.data.content.forEach((val) => {\n            val['no'] = no++;\n          });\n        }\n        this.page = response.data;\n      }\n      this.isLoadingResults = false;\n    },\n      error => {\n        console.debug(\"Server request has failed\");\n        this.isLoadingResults = false;\n      });\n\n  }\n\n  /**\n   * Used tolisten to pagination events/actions\n   * @param page\n   */\n  pageEvent(page: PageEvent) {\n    this.loadPage({ limit: page.pageSize, offset: page.pageIndex }, this.getFilters());\n  }\n\n\n  /**\n   * Used to processing table sorting\n   * @param event\n   */\n  processSorting(event: Sort) {\n    this.sortParams = event;\n    this.loadPage({ limit: this.page.size, offset: 0 }, this.getFilters());\n  }\n\n  /**\n   * Used to get filter entries from the filter form. Also adds sort parameters to request\n   */\n  private getFilters() {\n    //@ts-ignore\n    // let f: Map<String, any> = new Map(Object.entries(this.filterForm.value));\n    let f: Map<String, any> = new Map();\n    Object.keys(this.filterForm.value).forEach((val, key) => {\n      // console.debug(\"Key is \" + key + \" and value \" + val);\n      if (this.filterForm.value[val]) {\n        if (val == 'from' || val == \"to\") {\n          f.set(val, this.datePipe.transform(this.filterForm.value[val], 'yyyy-MM-dd'));\n        } else {\n          f.set(val, this.filterForm.value[val]);\n        }\n      }\n    })\n    //add sorting parameters\n    if (this.sortParams) {\n      f.set(\"sort\", this.sortParams.active + \",\" + this.sortParams.direction);\n    }\n    return f;\n  }\n  /**\n   * Used to process table filter. If date filter is not provide the from value is\n   * set to 2018-01-01 and to value is set to 1 year from today\n   * @param form\n   * @deprecated\n   */\n  processFilter(form) {\n    //@ts-ignore\n    this.loadPage({ offset: this.page.number, limit: this.page.size }, this.getFilters());\n  }\n\n  /**\n   * Used to check if miliki control is input\n   * @param control\n   */\n  isInput(control: any) {\n    return control instanceof TgrInput;\n  }\n\n  /**\n   * Used to check if miliki control is select\n   * @param control\n   */\n  isSelect(control: any) {\n    return control instanceof TgrSelect;\n  }\n\n  /**\n   * Used to check if miliki control is textarea\n   */\n  isTextArea(control: any) {\n    return control instanceof TgrTextarea;\n  }\n\n  /**\n   * Used to format date to string yyyy-MM-dd\n   * @param date\n   */\n  getFormattedDate(date) {\n    var year = date.getFullYear();\n\n    var month = (1 + date.getMonth()).toString();\n    month = month.length > 1 ? month : '0' + month;\n\n    var day = date.getDate().toString();\n    day = day.length > 1 ? day : '0' + day;\n\n    return year + '-' + month + '-' + day;\n  }\n\n  getFieldValue(data: Object, column: TgrMatTableColumn) {\n    if (column.callback) {\n      return column.callback(data);\n    }\n    let k: Array<string> = column.fieldName.split(\".\");\n    let value = this.sterwardService.getObjectValue(data, k);\n    return column.isDateColumn ? this.datePipe.transform(value, 'medium') : value;\n  }\n\n  /**\n   * Refresh data table values\n   */\n  refreshTable() {\n    console.debug(\"Refreshed data tables\");\n    //@ts-ignore\n    this.loadPage({ offset: this.page.number, limit: this.page.size }, this.getFilters());\n  }\n\n}\n/**\n * Used to define datatable columns with attributes (columnName, fieldName, width, sortable, canAutoResize,\n * draggable, resizable, isDateColumn)\n */\nexport interface TgrMatTableColumn {\n  /**\n   * column title\n   */\n  columnName: string;\n  /**\n   * Server side response field corresponding to the column i.e fullName may correspond to Name column\n   */\n  fieldName: string;\n  /**\n   * Width of the column\n   */\n  width?: number;\n  /**\n   * Enable sorting in a column\n   */\n  sortable?: boolean;\n  // /**\n  //  * Makes a column resizable\n  //  */\n  // canAutoResize?: boolean;\n  // /**\n  //  * Enables a column to be draggable\n  //  */\n  // draggable?: boolean;\n  // /**\n  //  * Makes a column resizable\n  //  */\n  // resizeable?: boolean;\n  /**\n   * Used to enable formating timestamp to string date\n   */\n  isDateColumn?: boolean;\n  /**\n   * Hide on small device less than 576px\n   */\n  hideOnXs?: boolean;\n  /**\n   * Callback function used for cell rendering.\n   *  Note: Function results are not sanitised\n   */\n  callback?: Function;\n}\n\n/**\n * Used to display more actions column and the end of the table\n */\nexport class TgrMoreActions {\n  /**\n   * Action Column name e.g. More Actions\n   */\n  name: string = \"Actions\";\n  /**\n   * Field name id from the server response e.g userId\n   */\n  idFieldName: string = \"id\";\n  /**\n   * Actions e.g. Edit, Delete\n   */\n  actions: Array<TgrMoreActionData>;\n\n  constructor(actions: Array<TgrMoreActionData>, id?: string, name?: string) {\n    this.actions = actions;\n    this.name = name;\n    this.idFieldName = id;\n  }\n\n}\n\nexport interface TgrMoreActionData {\n  /**\n   * Never mind this field it will be used by the library\n   */\n  id?: any;\n  /**\n   * Action name e.g. Edit, Delete\n   */\n  actionName: any;\n}\n","import { NgModule } from '@angular/core';\nimport { StewardClientComponent } from './steward-client.component';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\nimport { HttpClientModule } from '@angular/common/http';\nimport { StewardConfig } from './steward-client.service';\nimport { TgrMaterialTableComponent } from './tgr-material-table/tgr-material-table.component';\nimport {\n  MatInputModule,\n  MatTableModule,\n  MatCheckboxModule,\n  MatIconModule,\n  MatDatepickerModule,\n  MatNativeDateModule,\n  MatPaginatorModule,\n  MatSelectModule,\n  MatButtonModule,\n  MatSortModule,\n  MatMenuModule,\n  MatProgressSpinnerModule,\n  MatAutocompleteModule\n} from '@angular/material';\n\n@NgModule({\n  imports: [\n    FormsModule,\n    ReactiveFormsModule,\n    CommonModule,\n    HttpClientModule,\n    MatInputModule,\n    MatTableModule,\n    MatCheckboxModule,\n    MatIconModule,\n    MatDatepickerModule,\n    MatNativeDateModule,\n    MatPaginatorModule,\n    MatSelectModule,\n    MatButtonModule,\n    MatSortModule,\n    MatMenuModule,\n    MatProgressSpinnerModule,\n    MatAutocompleteModule\n  ],\n  declarations: [\n    StewardClientComponent,\n    TgrMaterialTableComponent,\n  ],\n  exports: [StewardClientComponent, TgrMaterialTableComponent,]\n})\nexport class StewardClientModule {\n  static forRoot(config: StewardConfig) {\n    return {\n      ngModule: StewardClientModule,\n      providers: [ {provide: StewardConfig, useValue: config} ]\n    }\n  }\n}\n"]}