{"version":3,"file":"steward-client.js","sources":["ng://steward-client/lib/entities/wrappers/response-wrapper.ts","ng://steward-client/lib/steward-client.service.ts","ng://steward-client/lib/steward-client.component.ts","ng://steward-client/lib/entities/wrappers/page.ts","ng://steward-client/lib/entities/tgr-dynamic-control.ts","ng://steward-client/lib/tgr-material-table/tgr-material-table.component.ts","ng://steward-client/lib/steward-client.module.ts"],"sourcesContent":["/**\n * Wraps server response\n */\nexport class ResponseWrapper<T> {\n    /**\n     * Http status code e.g. 200\n     */\n    status: number;\n    /**\n     * Server message\n     */\n    message: string;\n    /**\n     * Actual response data\n     */\n    data: T;\n}\n","import { Injectable, Optional } from '@angular/core';\r\nimport { HttpClient, HttpHeaders, HttpErrorResponse, HttpParams } from '@angular/common/http';\r\nimport { Observable, of } from 'rxjs';\r\nimport { catchError, map, tap } from 'rxjs/operators';\r\nimport { ResponseWrapper } from './entities/wrappers/response-wrapper';\r\n\r\nexport class StewardConfig {\r\n    base_url: string;\r\n    access_token?: string;\r\n    headers?: HttpHeaders;\r\n}\r\n\r\n/**\r\n * Oauth2 client details\r\n */\r\nexport class ClientDetails {\r\n    clientSecret: string;\r\n    clientId: String;\r\n}\r\n\r\n@Injectable()\r\nexport class StewardClientService<T, E> {\r\n    /**\r\n     * Http request headers\r\n     */\r\n    private headers: HttpHeaders;\r\n    /**\r\n     * Authorization token\r\n     */\r\n    private token: string;\r\n    /**\r\n     * Oauth refresh token\r\n     */\r\n    private refreshToken: String;\r\n    /**\r\n     * Base url\r\n     */\r\n    base_url: string = \"/\";\r\n    /**\r\n     * Token expiry token\r\n     */\r\n    private expiryDate: Date;\r\n    /**\r\n     * Oauth token endpoint\r\n     */\r\n    private oauthTokenEndpoint: string;\r\n\r\n    /**\r\n     * Constructor\r\n     * \r\n     * @param http http client service\r\n     * @param config base url, access token and request headers\r\n     * @param clientDetails Oauth2 client details\r\n     */\r\n    constructor(private http: HttpClient, private config: StewardConfig, @Optional() private clientDetails?: ClientDetails) {\r\n        this.base_url = config.base_url;\r\n        if (config.headers) {\r\n            this.headers = config.headers.append('Content-Type', 'application/json; charset=utf-8');\r\n        } else {\r\n            this.headers = new HttpHeaders({\r\n                'Content-Type': 'application/json; charset=utf-8'\r\n            });\r\n        }\r\n        if (config.access_token) {//append access token if the environment has access token\r\n            this.headers = this.headers.append('Authorization', \"Bearer \" + config.access_token);\r\n        }\r\n    }\r\n\r\n    /**\r\n     *  Used to update authorization token. Currently supports bearer token\r\n     *\r\n     * @param token\r\n     */\r\n    setToken(token: string) {\r\n        if (this.config.access_token) {//update token header\r\n            this.headers = this.headers.set(\"Authorization\", \"Bearer \" + token);\r\n        } else {//append access token if the environment has access token\r\n            this.headers = this.headers.append('Authorization', \"Bearer \" + token);\r\n        }\r\n    }\r\n    /**\r\n     * Used to handle http post requests\r\n     * @param endpoint expects either an endpoint or url\r\n     * @param data a valid object\r\n     * @param addHeaders additional headers to be appended to existing headers\r\n     */\r\n    post(endpoint: string, data: T, addHeaders?: Map<string, string | string[]>): Observable<ResponseWrapper<E>> {\r\n        this.oauthContext()\r\n        return this.http.post(this.serviceURL(endpoint), JSON.stringify(data), { headers: addHeaders ? this.appendHeaders(addHeaders) : this.headers }).pipe(\r\n            catchError(this.handleError<any>())\r\n        );\r\n\r\n    }\r\n\r\n    /**\r\n     * Used to handle http post requests\r\n     * @param endpoint expects either an endpoint or url\r\n     * @param addHeaders additional headers to be appended to existing headers\r\n     */\r\n    put(endpoint: string, data: T, addHeaders?: Map<string, string | string[]>): Observable<ResponseWrapper<E>> {\r\n        this.oauthContext();\r\n        return this.http.put(this.serviceURL(endpoint), JSON.stringify(data), { headers: addHeaders ? this.appendHeaders(addHeaders) : this.headers }).pipe(\r\n            catchError(this.handleError<any>())\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Handles http delete request\r\n     * @param endpoint expects either an endpoint or url\r\n     * @param data\r\n     * @param addHeaders additional headers to be appended to existing headers\r\n     */\r\n    delete(endpoint: string, data: T, addHeaders?: Map<string, string | string[]>): Observable<ResponseWrapper<E>> {\r\n        this.oauthContext();\r\n        return this.http.request('delete', this.serviceURL(endpoint), { headers: addHeaders ? this.appendHeaders(addHeaders) : this.headers, body: JSON.stringify(data) }).pipe(\r\n            catchError(this.handleError<any>())\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Handles http get request\r\n     * @param endpoint expects either an endpoint or url\r\n     * @param data request params\r\n     * @param addHeaders additional headers to be appended to existing headers\r\n     */\r\n    get(endpoint: string, data?: Map<string, string>, addHeaders?: Map<string, string | string[]>): Observable<ResponseWrapper<E>> {\r\n        this.oauthContext();\r\n        const options = {\r\n            headers: addHeaders ? this.appendHeaders(addHeaders) : this.headers,\r\n            params: this.getHttpParams(data)\r\n        };\r\n        return this.http.get(this.serviceURL(endpoint), options).pipe(\r\n            catchError(this.handleError<any>())\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Fetch a file\r\n     * @param endpoint expects either an endpoint or url\r\n     * @param data\r\n     */\r\n    getFile(endpoint: string, data?: Map<string, string>): Observable<ResponseWrapper<E>> {\r\n        this.oauthContext();\r\n        const options = {\r\n            params: this.getHttpParams(data)\r\n        };\r\n        return this.http.get(this.serviceURL(endpoint) + '?access_token=' + this.token, options).pipe(\r\n            catchError(this.handleError<any>())\r\n        );\r\n    }\r\n    /**\r\n     * if\r\n     * @param endpoint expects either an endpoint or url\r\n     * @param data\r\n     * @param headers\r\n     */\r\n    postFormData(endpoint: string, data: T, headers?: HttpHeaders): Observable<ResponseWrapper<E>> {\r\n        this.oauthContext();\r\n        const formData: FormData = new FormData();\r\n        Object.keys(data).forEach((key) => {\r\n            formData.append(key, data[key]);\r\n        });\r\n        if (this.headers.get(\"Authorization\") && (!headers)) {\r\n            headers = new HttpHeaders({ 'Authorization': 'Bearer ' + this.token });\r\n        } else if (!headers) {\r\n            headers = new HttpHeaders();\r\n        }\r\n        return this.http.post(this.serviceURL(endpoint), formData, { headers: headers }).pipe(\r\n            catchError(this.handleError<any>())\r\n        );\r\n    }\r\n\r\n    /**\r\n     * handle http form data request\r\n     * @param endpoint expects either an endpoint or url\r\n     * @param data expects a valid object\r\n     */\r\n    postFormDataMultipart(endpoint: string, data: T): Observable<ResponseWrapper<E>> {\r\n        this.oauthContext();\r\n        const formData: FormData = new FormData();\r\n        Object.keys(data).forEach((key) => {\r\n            if (Array.isArray(data[key])) {\r\n                data[key].forEach(k2 => {\r\n                    formData.append(key, k2);\r\n                });\r\n            } else {\r\n                formData.append(key, data[key]);\r\n            }\r\n        });\r\n        return this.http.post(this.serviceURL(endpoint), formData, { headers: new HttpHeaders({ 'Authorization': 'Bearer ' + this.token }) }).pipe(\r\n            catchError(this.handleError<any>())\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Handles http put form data request\r\n     * @param endpoint expects either an endpoint or url\r\n     * @param data valid object\r\n     */\r\n    putFormDataMultiPart(endpoint: string, data: T): Observable<ResponseWrapper<E>> {\r\n        this.oauthContext();\r\n        const formData: FormData = new FormData();\r\n        Object.keys(data).forEach((key) => {\r\n            if (Array.isArray(data[key])) {\r\n                data[key].forEach(k2 => {\r\n                    formData.append(key, k2);\r\n                });\r\n            } else {\r\n                formData.append(key, data[key]);\r\n            }\r\n        });\r\n        return this.http.put(this.serviceURL(endpoint), formData, { headers: new HttpHeaders({ 'Authorization': 'Bearer ' + this.token }) }).pipe(\r\n            catchError(this.handleError<any>())\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Convert map to HttpParams\r\n     * @param data\r\n     */\r\n    private getHttpParams(data: Map<string, string>): HttpParams {\r\n        if (data == undefined) {\r\n            return new HttpParams();\r\n        }\r\n        let httpParams: HttpParams = new HttpParams();\r\n        data.forEach((value: string, key: string) => {\r\n            httpParams = httpParams.append(key, value);\r\n        });\r\n        return httpParams;\r\n    }\r\n    /**\r\n     * Used to catch exception thrown by http client returns internal server error\r\n     * if status 500 is encountered\r\n     */\r\n    private handleError<ResponseWrapper>() {\r\n        return (error: HttpErrorResponse): Observable<any> => {\r\n            const res = new ResponseWrapper();\r\n            //            console.error(error); // log to console instead\r\n            if (error.status == 500) {\r\n                res.status = error.status;\r\n                res.message = 'Sorry internal server error occured please try again later';\r\n            } else {\r\n                res.status = error.status;\r\n                res.message = error.error.message;\r\n                res.data = error.error.data;\r\n            }\r\n            return of(res);\r\n        };\r\n    }\r\n    /**\r\n     * Used to render action buttons\r\n     */\r\n    static renderMore(id: any) {\r\n        return '<div class=\\'actions-buttons center\\' id=\\'' + id + '\\'><i class=\\'fa fa-check\\' title=\\'Approve\\'></i> <i class=\\'fa fa-ban\\' title=\\'Decline\\'></i></div>';\r\n    }\r\n\r\n    /**\r\n     * Handles datatable request\r\n     * @param endpoint expects either an endpoint or url\r\n     * @param data expects a valid map\r\n     */\r\n    public intiateDataTable(endpoint: string, data?: Map<string, string>) {\r\n        this.oauthContext();\r\n        const options = {\r\n            headers: this.headers,\r\n            params: this.getHttpParams(data)\r\n        };\r\n        return this.http.get(this.serviceURL(endpoint), options).pipe(\r\n            catchError(this.handleError<any>())\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Used to validate if a string is a valid URL\r\n     * @param url\r\n     */\r\n    public isURL(url: string): boolean {\r\n        try {\r\n            new URL(url);\r\n            return true;\r\n        } catch (_) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * If the url parameter is an endpoint it appends to the base url\r\n     * @param url\r\n     * @see base_url\r\n     */\r\n    public serviceURL(url: string): string {\r\n        return (this.isURL(url)) ? url : this.base_url + url;\r\n    }\r\n\r\n    /**\r\n   * Used to find key value based on the key sequence provided\r\n   * @param data expects an object\r\n   * @param keys i.e. user.gender.type.type\r\n   */\r\n    public getObjectValue(data: any, keys: Array<string>) {\r\n        if ((!(data instanceof Object)) || (keys.length === 1)) {\r\n            return data[keys[keys.length - 1]];\r\n        }\r\n        let value = null;\r\n        Object.keys(data).forEach((key) => {\r\n            if ((key === keys[0]) && (data[key] instanceof Object)) {\r\n                value = this.getObjectValue(data[key], keys);\r\n            } else if (key === keys[keys.length - 1]) {\r\n                value = data[key];\r\n            }\r\n        });\r\n        return value;\r\n\r\n    }\r\n\r\n    /**\r\n     * Used to append headers the current httpHeaders\r\n     * @returns merged headers\r\n     */\r\n    public appendHeaders(entries: Map<String, string | string[]>): HttpHeaders {\r\n        let customHeaders: HttpHeaders = this.headers;\r\n        entries.forEach((val: string | string[], key: string) => {\r\n            customHeaders = customHeaders.append(key, val);\r\n        });\r\n        return customHeaders;\r\n    }\r\n\r\n    /**\r\n     * Handles oauth authentication with password grant\r\n     * \r\n     * @param username user's username\r\n     * @param password user's password\r\n     * @param addHeaders additional headers to be appended to existing headers\r\n     */\r\n    public authenticate(endpoint: string, username: string, password: string, addHeaders?: Map<string, string | string[]>): Observable<ResponseWrapper<E>> {\r\n        if (!this.clientDetails) {\r\n            console.warn(\"oauth 2 authentication not support ensure you have injected client details(client secret and client id)\")\r\n        }\r\n        let formHeaders = addHeaders ? this.appendHeaders(addHeaders) : this.headers\r\n        formHeaders = formHeaders.set('Authorization', 'Basic ' + this.getHttpBasicToken());\r\n        formHeaders = formHeaders.delete(\"Content-Type\");\r\n        const formData: FormData = new FormData();\r\n        formData.append(\"username\", username);\r\n        formData.append(\"password\", password);\r\n        formData.append(\"grant_type\", \"password\");\r\n        return this.http.post(this.serviceURL(endpoint), formData, { headers: formHeaders }).pipe(\r\n            catchError(this.handleError<any>())\r\n        ).pipe(tap(response => {\r\n            if (response[\"access_token\"]) {\r\n                this.setSessionCookie(response[\"access_token\"], response[\"refresh_token\"], response[\"expires_in\"]);\r\n            }\r\n        }));\r\n\r\n    }\r\n\r\n    /**\r\n     * Update authorization token cookie. Also updates Bearer Authorization token\r\n     * \r\n     * @param token oauth token\r\n     * @param refreshToken oauth refresh token\r\n     * @param expiry token expiry in seconds\r\n     */\r\n    private setSessionCookie(token: string, refreshToken: string, expiry: number) {\r\n        let cookie = \";samesite=strict;path=/\";\r\n        document.cookie = \"token=\" + token + cookie + \";max-age=\" + expiry;\r\n        document.cookie = \"refreshToken=\" + refreshToken + cookie + \";max-age=\" + expiry + 300;\r\n        this.headers = this.headers.set(\"Authorization\", \"Bearer \" + token)\r\n    }\r\n\r\n    /**\r\n     * If client details exists, expired token is refreshed.\r\n     * \r\n     */\r\n    private async oauthContext() {\r\n        if (!this.clientDetails) {\r\n            return;\r\n        }\r\n        this.updateAccessToken();\r\n        if ((!this.token) && this.refreshToken) {\r\n            await this.refreshAccessToken().subscribe(response => {\r\n                if (!response[\"access_token\"]) {\r\n                    console.error(\"Failed to refresh access token\", response);\r\n                }\r\n            });\r\n        } else {\r\n            return;\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * Update access token and refresh token from session cookie\r\n     */\r\n    private updateAccessToken(){\r\n        console.debug(\"Updating session credentials...\")\r\n        let inst = this;\r\n        document.cookie.split(';').forEach(function (item) {\r\n            if(item.includes(\"token=\")){\r\n                inst.token = item.split('=')[1];\r\n                inst.headers = inst.headers.set(\"Authorization\", \"Bearer \" + inst.token)\r\n            } else if(item.includes(\"refreshToken=\")){\r\n                inst.refreshToken = item.split('=')[1];\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Refreshes access token\r\n     * \r\n     * @param fun callback function after token refresh\r\n     */\r\n    public refreshAccessToken(): Observable<ResponseWrapper<E>> {\r\n        let headers: HttpHeaders = new HttpHeaders({\r\n            'Authorization': 'Basic '\r\n                + this.getHttpBasicToken()\r\n        });\r\n        return this.http.post(this.serviceURL(this.oauthTokenEndpoint), {\r\n            refresh_token: this.refreshAccessToken,\r\n            grant_type: \"refresh_token\"\r\n        }, { headers: headers })\r\n            .pipe(catchError(this.handleError<any>()))\r\n            .pipe(\r\n                tap(response => {\r\n                    if (response[\"refresh_token\"]) {\r\n                        this.setSessionCookie(response[\"access_token\"], response[\"refresh_token\"], response[\"expires_in\"])\r\n                    }\r\n                }));\r\n    }\r\n\r\n    /**\r\n     * Get http basic token\r\n     */\r\n    private getHttpBasicToken(): string {\r\n        return btoa(this.clientDetails.clientId + \":\" + this.clientDetails.clientSecret)\r\n    }\r\n}\r\n/**\r\n * Authorization token details\r\n */\r\nexport interface Token {\r\n    accessToken: String;\r\n    refreshToken: String;\r\n}\r\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'lib-steward-client',\n  template: `\n    <p>\n      steward-client works!\n    </p>\n  `,\n  styles: []\n})\nexport class StewardClientComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","/**\n * Datable page used to wrapper server content response\n */\nexport class Page<T> {\n    /**\n     * Number of items per page same as limit\n     */\n    size: number = 20;\n    /**\n     * Total items available on the server\n     */\n    totalElements: number = 0;\n    /**\n     * Total number of pages present\n     */\n    totalPages: number = 0;\n    /**\n     * Checks if is the first page\n     */\n    first: boolean = true;\n    /**\n     * Checks if it is the last page\n     */\n    last: boolean = false;\n    /**\n     * The actual page content\n     */\n    content: Array<T> = [];\n    /**\n     * Used to map sort parameters\n     */\n    sorted: Sort = new Sort();\n    /**\n     * Current page number\n     */\n    number: number = 0;\n}\n/**\n * used to map sort request\n */\nexport class Sort{\n    sorted: boolean = false;\n    unsorted: boolean = true;\n}\n","/**\n * Represents dynamic html controls (Input, TextArea and Select)\n */\nexport class TgrDynamicControl<T> {\n    /**\n     * Control label\n     */\n    label: string;\n    /**\n     * Icon to be appended before the control (supports class defined icons)\n     */\n    icon: string;\n    /**\n     * Name of the control (provide variable valid names ie. no spaces prefarably api corresponding names e.g. userName)\n     */\n    name: string;\n    /**\n     * The actual control (TgrInput, TgrTextArea & TgrSelect)\n     */\n    controlType: T;\n    /**\n     * Checks if the field is required\n     */\n    isRequired: boolean;\n    /**\n     * Control placeholder\n     */\n    placeholder: string = \"\";\n\n    constructor(label: string, name: string, controlType: T, icon: string = \"fa fa-file-text-o\",\n        isRequired: boolean = false, placeholder: string = null) {\n        this.label = label;\n        this.name = name;\n        this.controlType = controlType;\n        this.icon = icon;\n        this.isRequired = isRequired;\n        this.placeholder = placeholder ? placeholder : label;\n    }\n\n}\n/**\n * Used to represent html input with options:\n * type: default to text,  maxLength, minLength, min, max\n */\nexport class TgrInput{\n    /**\n     * Type of input e.g. text, number, date\n     */\n    type: string;\n    /**\n     * Used to validate length of the input\n     */\n    maxLength: number;\n    /**\n     * Used to validate minimum input length\n     */\n    minLength: number;\n    /**\n     * Used to validate number inputs\n     */\n    min: number;\n    /**\n     * Used to validate number inputs\n     */\n    max: number;\n\n    constructor(type: string = \"text\") {\n        this.type = type;\n        this.minLength = this.min = 0;\n        this.maxLength = 4000;\n        this.max = 1000000000;\n    }\n}\n\n/**\n * Represents html textarea input\n */\nexport class TgrTextarea{\n    /**\n     * Number textarea columns\n     */\n    cols?: number;\n    /**\n     * Number of textarea rows\n     */\n    rows?: number;\n    /**\n     * Validate maximum input length\n     */\n    maxLength: number;\n    /**\n     * Validate minimum input length\n     */\n    minLength: number;\n\n    constructor(cols: number = 5, rows: number = 1){\n        this.cols = cols;\n        this.rows = rows;\n        this.maxLength = 4000;\n        this.minLength = 0\n    }\n}\n\n/**\n * Represents html select control\n */\nexport class TgrSelect {\n    /**\n     * Select options\n     */\n    options: Array<TgrSelectOption>;\n\n    constructor(options: Array<TgrSelectOption>){\n        this.options = options;\n    }\n\n}\n\nexport class TgrSelectOption{\n    /**\n     * Option value\n     */\n    value: string | number;\n    /**\n     * Option text/label\n     */\n    text: string;\n\n    constructor(value: string, text: string = null){\n        this.value = value;\n        this.text = text ? text : value;\n    }\n\n}\n\n","import { Component, OnInit, EventEmitter, Input, Output, ViewChild, AfterViewInit } from '@angular/core';\nimport { NgForm, FormGroup, FormControl, Validators } from '@angular/forms';\nimport { Page } from '../entities/wrappers/page';\nimport { MlkDynamicControl, MlkInput, MlkTextarea, MlkSelect } from '../entities/wrappers/mlk-dynamic-control';\nimport { ResponseWrapper } from '../entities/wrappers/response-wrapper';\nimport { StewardClientService } from '../steward-client.service';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { DateAdapter, MAT_DATE_FORMATS, MAT_DATE_LOCALE } from '@angular/material/core';\nimport { NativeDateAdapter, PageEvent, MatSort, Sort } from '@angular/material';\nimport { TgrDynamicControl, TgrInput, TgrSelect, TgrTextarea } from '../entities/tgr-dynamic-control';\nimport { DatePipe } from '@angular/common';\n\n/**\n * Format angular date to dd-mm-yyyy\n */\nexport class AppDateAdapter extends NativeDateAdapter {\n\n  /**\n   * Parse date to dd-mm-yyyy\n   * @param date  date input\n   * @param displayFormat expects to be input string\n   */\n  format(date: Date, displayFormat: Object): string {\n\n    if (displayFormat === 'input') {\n\n      var day = date.getDate();\n      var month = date.getMonth() + 1;\n      const year = date.getFullYear();\n      let dayString: string;\n      let monthString: string;\n\n      if (day < 10) {\n        dayString = '0' + day;\n      } else {\n        dayString = '' + day;\n      }\n\n      if (month < 10) {\n        monthString = '0' + month;\n      } else {\n        monthString = '' + month;\n      }\n\n      return `${year}-${monthString}-${dayString}`;\n    }\n\n    return date.toDateString();\n  }\n}\n/**\n * Material date formats\n */\nexport const APP_DATE_FORMATS =\n{\n  parse: {\n    dateInput: { month: 'numeric', year: 'numeric', day: 'numeric' },\n  },\n  display: {\n    dateInput: 'input',\n    monthYearLabel: { year: 'numeric', month: 'numeric' },\n    dateA11yLabel: { year: 'numeric', month: 'numeric', day: 'numeric' },\n    monthYearA11yLabel: { year: 'numeric', month: 'long' },\n  }\n};\n\n\n@Component({\n  selector: 'tgr-material-table',\n  templateUrl: './tgr-material-table.component.html',\n  styleUrls: ['./tgr-material-table.component.css'],\n  providers: [\n    { provide: DateAdapter, useClass: AppDateAdapter },\n    {\n      provide: MAT_DATE_FORMATS, useValue: APP_DATE_FORMATS\n    }\n  ]\n})\nexport class TgrMaterialTableComponent implements OnInit, AfterViewInit {\n\n  displayedColumns: string[] = [];\n  @Output() selection: SelectionModel<any> = new SelectionModel<any>(true, []);\n  @Output() rowSelection = new EventEmitter<SelectionModel<any>>();\n  @ViewChild(MatSort, { static: true }) sort: MatSort;\n\n\n  @Input() columns: Array<TgrMatTableColumn> = [];\n  @Input() enableCheckbox: boolean = true;\n  @Input() endpoint: string;\n  @Input() moreActions: TgrMoreActions;\n  @Output() actionsEvent = new EventEmitter<TgrMoreActionData>()\n  @Input() filterComponents: Array<TgrDynamicControl<any>> = [];\n  @Input() params: Map<string, any>;\n  @Input() showDefaultFilters: boolean = true;\n  @Input() showNumberColumn: boolean = false;\n  /**\n   * Additional headers to be appended on the request headers\n   */\n  @Input() headers: Map<string, string | string[]>;\n  page: Page<any>;\n  selected = [];\n  // @ViewChild(DatatableComponent) table: DatatableComponent;\n  filter: Object = {};\n  filterForm: FormGroup;\n  private sortParams: Sort;\n  /**\n   * Checks if server request has been processed\n   */\n  isLoadingResults = false;\n  /**\n   * Date pipe\n   */\n  private datePipe: DatePipe\n\n  constructor(private sterwardService: StewardClientService<ResponseWrapper<Page<any>>, any>) {\n    this.page = new Page();\n    this.page.content = [];\n    this.datePipe = new DatePipe('en-US');\n  }\n\n  /**\n   * Generate form control from filterComponents and also appending default controls ie. date filter and search controls\n   */\n  ngOnInit() {\n    //intializing table columns\n    if (this.enableCheckbox) {\n      this.displayedColumns.push('checkbox');\n    }\n    if (this.showNumberColumn) {\n      this.displayedColumns.push('no');\n    }\n    this.columns.forEach(c => {\n      this.displayedColumns.push(c.fieldName);\n    });\n    if (this.moreActions) {\n      this.displayedColumns.push('actions');\n    } else {\n      console.debug('moreActions not injected skipping rendering \\'More Actions\\' column');\n    }\n    let group = {};\n    this.filterComponents.forEach(comp => {\n      let validators: Array<any> = [];\n      if (comp.isRequired) {\n        validators.push(Validators.required);\n      }\n\n      if (comp.controlType instanceof TgrInput || comp.controlType instanceof TgrTextarea) {\n        validators.push(Validators.minLength(comp.controlType.minLength));\n        validators.push(Validators.maxLength(comp.controlType.maxLength));\n      }\n\n      if (comp.controlType instanceof TgrInput) {\n        validators.push(Validators.max(comp.controlType.max));\n        validators.push(Validators.min(comp.controlType.min));\n      }\n      group[comp.name] = new FormControl('', validators)\n    });\n    //add default controls\n    group['from'] = new FormControl('', Validators.maxLength(100));\n    group['to'] = new FormControl('', Validators.maxLength(100));\n    group['needle'] = new FormControl('', Validators.maxLength(200));\n    this.filterForm = new FormGroup(group);\n    this.loadPage({ offset: 0, limit: this.page.size }, null);\n  }\n\n  /**\n   * After view intialization fire selection event\n   */\n  ngAfterViewInit(): void {\n    this.rowSelection.emit(this.selection);\n  }\n\n  /** Whether the number of selected elements matches the total number of rows. */\n  isAllSelected() {\n    const numSelected = this.selection.selected.length;\n    const numRows = this.page.content.length;\n    return numSelected == numRows;\n  }\n\n  /** Selects all rows if they are not all selected; otherwise clear selection. */\n  masterToggle() {\n    this.isAllSelected() ?\n      this.selection.clear() :\n      this.page.content.forEach(row => this.selection.select(row));\n  }\n\n  /**\n   * Used to emit click event of the actions\n   * @param event Actions data\n   */\n  onActionClick(event: TgrMoreActionData) {\n    this.actionsEvent.emit(event);\n  }\n\n  /**\n   * Process server request of datable\n   *\n   * @param pageInfo Page variables\n   * @param filters Filter variables\n   */\n  loadPage(pageInfo, filters) {\n    if (!this.endpoint) {\n      return;\n    }\n    this.isLoadingResults = true;\n    let request: Map<string, any>;\n    if (filters) {\n      request = filters;\n    } else {\n      request = new Map();\n    }\n    if (this.params) {\n      this.params.forEach((value, key) => {\n        if (key != null && key !== undefined) { // ignore null values\n          request.set(key, value);\n        }\n      });\n    }\n    request.set('page', pageInfo.offset);\n    request.set('size', pageInfo.limit);\n    this.sterwardService.get(this.endpoint, request, this.headers).subscribe(response => {\n      if (response.status === 200) {\n        if (this.showNumberColumn) {\n          let no = 1 + (response.data.number * response.data.size);\n          response.data.content.forEach((val) => {\n            val.no = no++;\n          });\n        }\n        this.page = response.data;\n      }\n      this.isLoadingResults = false;\n    },\n      error => {\n        console.debug('Server request has failed');\n        this.isLoadingResults = false;\n      });\n\n  }\n\n  /**\n   * Used tolisten to pagination events/actions\n   * @param page page variables\n   */\n  pageEvent(page: PageEvent) {\n    this.loadPage({ limit: page.pageSize, offset: page.pageIndex }, this.getFilters());\n  }\n\n\n  /**\n   * Used to processing table sorting\n   * @param event Sort variables\n   */\n  processSorting(event: Sort) {\n    this.sortParams = event;\n    this.loadPage({ limit: this.page.size, offset: 0 }, this.getFilters());\n  }\n\n  /**\n   * Used to get filter entries from the filter form. Also adds sort parameters to request\n   */\n  private getFilters() {\n    const f: Map<string, any> = new Map<string, any>();\n    Object.keys(this.filterForm.value).forEach((val, key) => {\n      // console.debug(\"Key is \" + key + \" and value \" + val);\n      if (this.filterForm.value[val]) {\n        if (val === 'from' || val === 'to') {\n          f.set(val, this.datePipe.transform(this.filterForm.value[val], 'yyyy-MM-dd'));\n        } else {\n          f.set(val, this.filterForm.value[val]);\n        }\n      }\n    })\n    // add sorting parameters\n    if (this.sortParams) {\n      f.set('sort', this.sortParams.active + ',' + this.sortParams.direction);\n    }\n    return f;\n  }\n\n  /**\n   * Used to process table filter. If date filter is not provide the from value is\n   * set to 2018-01-01 and to value is set to 1 year from today\n   *\n   * @deprecated\n   */\n  processFilter() {\n    this.loadPage({ offset: this.page.number, limit: this.page.size }, this.getFilters());\n  }\n\n  /**\n   * Used to check if additional control is input\n   *\n   * @param control additional control\n   */\n  isInput(control: any) {\n    return control instanceof TgrInput;\n  }\n\n  /**\n   * Used to check if miliki control is select\n   *\n   * @param control Select control\n   */\n  isSelect(control: any) {\n    return control instanceof TgrSelect;\n  }\n\n  /**\n   * Used to check if miliki control is textarea\n   */\n  isTextArea(control: any) {\n    return control instanceof TgrTextarea;\n  }\n\n  /**\n   * Used to format date to string yyyy-MM-dd\n   * @param date Date variable\n   */\n  getFormattedDate(date) {\n    const year = date.getFullYear();\n\n    let month = (1 + date.getMonth()).toString();\n    month = month.length > 1 ? month : '0' + month;\n\n    let day = date.getDate().toString();\n    day = day.length > 1 ? day : '0' + day;\n\n    return year + '-' + month + '-' + day;\n  }\n\n  getFieldValue(data: object, column: TgrMatTableColumn) {\n    if (column.callback) {\n      return column.callback(data);\n    }\n    const k: Array<string> = column.fieldName.split('.');\n    const value = this.sterwardService.getObjectValue(data, k);\n    return column.isDateColumn ? this.datePipe.transform(value, 'medium') : value;\n  }\n\n  /**\n   * Refresh data table values\n   */\n  refreshTable() {\n    console.debug('Refreshed data tables');\n    this.loadPage({ offset: this.page.number, limit: this.page.size }, this.getFilters());\n  }\n\n}\n/**\n * Used to define datatable columns with attributes (columnName, fieldName, width, sortable, canAutoResize,\n * draggable, resizable, isDateColumn)\n */\nexport interface TgrMatTableColumn {\n  /**\n   * column title\n   */\n  columnName: string;\n  /**\n   * Server side response field corresponding to the column i.e fullName may correspond to Name column\n   */\n  fieldName: string;\n  /**\n   * Width of the column\n   */\n  width?: number;\n  /**\n   * Enable sorting in a column\n   */\n  sortable?: boolean;\n  // /**\n  //  * Makes a column resizable\n  //  */\n  // canAutoResize?: boolean;\n  // /**\n  //  * Enables a column to be draggable\n  //  */\n  // draggable?: boolean;\n  // /**\n  //  * Makes a column resizable\n  //  */\n  // resizeable?: boolean;\n  /**\n   * Used to enable formating timestamp to string date\n   */\n  isDateColumn?: boolean;\n  /**\n   * Hide on small device less than 576px\n   */\n  hideOnXs?: boolean;\n  /**\n   * Callback function used for cell rendering.\n   *  Note: Function results are not sanitised\n   */\n  callback?: (data: any) => object;\n}\n\n/**\n * Used to display more actions column and the end of the table\n */\nexport class TgrMoreActions {\n  /**\n   * Action Column name e.g. More Actions\n   */\n  name = 'Actions';\n  /**\n   * Field name id from the server response e.g userId\n   * @deprecated\n   */\n  idFieldName = 'id';\n  /**\n   * Actions e.g. Edit, Delete\n   */\n  actions: Array<TgrMoreActionData>;\n  /**\n   * Callback function\n   */\n  callback?: (data: any) => object;\n\n  /**\n   * @param actions Rows action data\n   * @param id Id field name currently deprecated\n   * @param name Actions column name\n   * @param callback Rows callback function for data sanitization\n   */\n  constructor(actions: Array<TgrMoreActionData>, id?: string, name?: string, callback?: (data: any) => object) {\n    this.actions = actions;\n    this.name = name;\n    this.idFieldName = id;\n    this.callback = callback;\n  }\n\n}\n\nexport interface TgrMoreActionData {\n  /**\n   * Never mind this field it will be used by the library\n   * @deprecated\n   */\n  id?: any;\n  /**\n   * Action name e.g. Edit, Delete\n   */\n  actionName: any;\n  /**\n   * \n   */\n  data?: object;\n}\n","import { NgModule } from '@angular/core';\nimport { StewardClientComponent } from './steward-client.component';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\nimport { HttpClientModule } from '@angular/common/http';\nimport { StewardConfig, ClientDetails } from './steward-client.service';\nimport { TgrMaterialTableComponent } from './tgr-material-table/tgr-material-table.component';\nimport {\n  MatInputModule,\n  MatTableModule,\n  MatCheckboxModule,\n  MatIconModule,\n  MatDatepickerModule,\n  MatNativeDateModule,\n  MatPaginatorModule,\n  MatSelectModule,\n  MatButtonModule,\n  MatSortModule,\n  MatMenuModule,\n  MatProgressSpinnerModule,\n  MatAutocompleteModule\n} from '@angular/material';\n\n@NgModule({\n  imports: [\n    FormsModule,\n    ReactiveFormsModule,\n    CommonModule,\n    HttpClientModule,\n    MatInputModule,\n    MatTableModule,\n    MatCheckboxModule,\n    MatIconModule,\n    MatDatepickerModule,\n    MatNativeDateModule,\n    MatPaginatorModule,\n    MatSelectModule,\n    MatButtonModule,\n    MatSortModule,\n    MatMenuModule,\n    MatProgressSpinnerModule,\n    MatAutocompleteModule\n  ],\n  declarations: [\n    StewardClientComponent,\n    TgrMaterialTableComponent,\n  ],\n  exports: [StewardClientComponent, TgrMaterialTableComponent,]\n})\nexport class StewardClientModule {\n  static forRoot(config: StewardConfig, clientDetails?: ClientDetails) {\n    return {\n      ngModule: StewardClientModule,\n      providers: [ {provide: StewardConfig, useValue: config}, {provide: ClientDetails, useValue: clientDetails} ]\n    }\n  }\n}\n"],"names":[],"mappings":"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"}